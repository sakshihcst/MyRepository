
#SQL Constants for Select  constants

select.from.action.meta=SELECT concat(request_type,'-',current_status,'-',action_id,'-',ifnull(mod_active,'NA')) as key_act,next_status,activity,seq,IFNULL(mod_active,'NA') as mod_active,mod_required,action_id,concat(request_type,'-',action_id) as action_type FROM request_action_status_meta;
select.from.esc.time=SELECT ESC_TIME_LMT FROM esc_time WHERE STORE=:STORE_NUMBER AND TYPE='BINWEB'

select.from.identifier.meta=SELECT identifier_type,identifier_id FROM identifier_meta

select.item.detail.id1= select rqd.rqd_id from request_queue_details rqd INNER JOIN REQUEST_QUEUE_TRANS trans on rqd.salescheck = trans.salescheck where trans.REQUEST_STATUS in ('OPEN') and rqd.store_number = :storeNumber and rqd.salescheck = :requestNum and rqd.item_status in (:openStatus)
select.item.detail.id2 = and rqd.div_num = :divNum and rqd.item = :itemNum and rqd.sku = :sku
select.item.detail.id3 = and rqd.ksn = :ksn
select.item.detail.id4 = and rqd.upc = :upc 
select.item.detail.id5 = and rqd.item_seq = :item_seq

check_multi_item=SELECT count(*) as item_count FROM request_queue_details where rqt_id=:RQT_ID and store_number=:STORE and  concat(div_num,item,sku)= :ITEM_IDENTIFIER
check_item_status=SELECT concat(ifnull(concat(ITEM.div_num,ITEM.ITEM,ITEM.SKU,ifnull(item.plus4,'')),''),',',ifnull(item.ksn,''),',',ifnull(item.upc,''),',',ifnull((if(item.item_id='',' ,',item.item_id)),' ,'),'-',ifnull(item.item_seq,'')) as item_identifier,ITEM.item_status FROM  request_queue_details as item where item.store_number =:strNum and rqt_id=:rqtId;
check.request.complete=SELECT count(*) as incomplete_count FROM request_queue_details where rqt_id=:rqtId and store_number=:strNum and  item_status IN (select REQUIRED_STATUS from request_queue_meta where request_type=:request_type);
select.stock.location = select store_number,qty,stock_location,div_num,item,sku,assigned_user from request_queue_details rqd where rqd.rqd_id = :rqd_id and rqd.store_number = :storeNum;
check.duplicate.request = SELEct rqt_id from request_queue_trans where store_number=:storeNumber and salescheck=:request_number and request_status in  ('OPEN');
get_requestId_from_salescheck = Select rqt_id,request_status,request_type from request_queue_trans where store_number=:storeNumber and salescheck=:request_number;
check_request_void = SELECT count(*) as incomplete_count FROM request_queue_details where rqt_id=:rqtId and store_number=:strNum and  item_status NOT IN ('VOIDED')
select.from.metatransidentifier=SELECT identifier.rqt_id,identifier.value,identifier.type,identifier.store_number from  REQUEST_IDENTIFIER identifier ,request_queue_trans trans where trans.rqt_id=identifier.rqt_id and trans.store_number = :store_number and identifier.rqt_id  = :RQT_ID
#select.from.metatransitem = select  GROUP_CONCAT(value ORDER BY type ASC SEPARATOR ' ') As full_name,trans.request_type,detail.rqt_id, rqd_id, assigned_user, div_num, item, sku, plus4, upc, ksn, qty, trans.salescheck, item_status, from_location, to_location, item_image, detail.store_number, stock_location, stock_quantity, thumbnail_desc, trans.request_number,trans.create_timestamp, escalation, escalation_time, item_seq, detail.created_by, detail.modified_by, delivered_quantity,ver,locker_eligible,item_id from REQUEST_QUEUE_TRANS TRANS LEFT JOIN REQUEST_QUEUE_DETAILS detail on trans.rqt_id=detail.rqt_id  left join REQUEST_IDENTIFIER identifier on detail.rqt_id = identifier.rqt_id  left join REQUEST_QUEUE_META QM on TRANS.request_type = QM.request_type  where trans.store_number=:store_number and QM.queue=:queue and trans.request_status ='OPEN' and identifier.type IN (1,2)  and detail.item_status=QM.required_status group by rqd_id
select.from.metatransitem = select  GROUP_CONCAT(value ORDER BY type ASC SEPARATOR ' ') As full_name,concat(trans.request_type,(CASE WHEN TRANS.REQUEST_TYPE='LAYAWAY' then detail.layaway_type else '' end)) request_type,detail.rqt_id, rqd_id, assigned_user, div_num, item, sku, plus4, upc, ksn, qty, trans.salescheck, item_status, from_location, to_location, item_image, detail.store_number, stock_location,detail.full_name as short_desc, stock_quantity, thumbnail_desc, trans.request_number,trans.create_timestamp, escalation, escalation_time, item_seq, detail.created_by, detail.modified_by,detail.return_reason, delivered_quantity,ver,locker_eligible,item_id,detail.create_time,detail.ffm_type from REQUEST_QUEUE_TRANS TRANS LEFT JOIN REQUEST_QUEUE_DETAILS detail on trans.rqt_id=detail.rqt_id  left join REQUEST_IDENTIFIER identifier on detail.rqt_id = identifier.rqt_id  left join REQUEST_QUEUE_META QM on concat(TRANS.request_type,(CASE WHEN TRANS.REQUEST_TYPE='LAYAWAY' then detail.layaway_type else '' end)) = QM.request_type  where trans.store_number=:store_number and QM.queue=:queue and trans.request_status IN ('OPEN','WIP') and identifier.type IN (1,2)  and detail.item_status=QM.required_status  and detail.item_status not in('PICKED_UP') group by rqd_id
#select.from.metatransitem = select  GROUP_CONCAT(value ORDER BY type ASC SEPARATOR ' ') As full_name,concat(trans.request_type,(CASE WHEN TRANS.REQUEST_TYPE='LAYAWAY' then detail.layaway_type else '' end)) request_type,detail.rqt_id, rqd_id, assigned_user, div_num, item, sku, plus4, upc, ksn, qty, trans.salescheck, item_status, from_location, to_location, item_image, detail.store_number, stock_location, stock_quantity, thumbnail_desc, trans.request_number,trans.create_timestamp, escalation, escalation_time, item_seq, detail.created_by, detail.modified_by, delivered_quantity,ver,locker_eligible,item_id,detail.create_time from REQUEST_QUEUE_TRANS TRANS LEFT JOIN REQUEST_QUEUE_DETAILS detail on trans.rqt_id=detail.rqt_id  left join REQUEST_IDENTIFIER identifier on detail.rqt_id = identifier.rqt_id  left join REQUEST_QUEUE_META QM on concat(TRANS.request_type,(CASE WHEN TRANS.REQUEST_TYPE='LAYAWAY' then detail.layaway_type else '' end)) = QM.request_type  where trans.store_number=:store_number and QM.queue=:queue and trans.request_status IN ('OPEN','WIP') and identifier.type IN (1,2)  and detail.item_status=QM.required_status  and detail.item_status not in('PICKED_UP') group by rqd_id
select.from.metatransitem.hg.wip = select  GROUP_CONCAT(value ORDER BY type ASC SEPARATOR ' ') As full_name,concat(trans.request_type,(CASE WHEN TRANS.REQUEST_TYPE='LAYAWAY' then detail.layaway_type else '' end)) request_type,detail.rqt_id, rqd_id, assigned_user, div_num, item, sku, plus4, upc, ksn, qty, trans.salescheck, item_status, from_location, to_location, item_image, detail.store_number, stock_location, stock_quantity, thumbnail_desc, trans.request_number,trans.create_timestamp, escalation, escalation_time, item_seq, detail.created_by, detail.modified_by, delivered_quantity,ver,locker_eligible,item_id,detail.create_time from REQUEST_QUEUE_TRANS TRANS LEFT JOIN REQUEST_QUEUE_DETAILS detail on trans.rqt_id=detail.rqt_id  left join REQUEST_IDENTIFIER identifier on detail.rqt_id = identifier.rqt_id  left join REQUEST_QUEUE_META QM on concat(TRANS.request_type,(CASE WHEN TRANS.REQUEST_TYPE='LAYAWAY' then detail.layaway_type else '' end)) = QM.request_type  where trans.store_number=:store_number and QM.queue=:queue and trans.request_status IN ('WIP') and identifier.type IN (1,2)  and detail.item_status=QM.required_status group by rqd_id
select.from.metatransitem.hg.open = select  GROUP_CONCAT(value ORDER BY type ASC SEPARATOR ' ') As full_name,concat(trans.request_type,(CASE WHEN TRANS.REQUEST_TYPE='LAYAWAY' then detail.layaway_type else '' end)) request_type,detail.rqt_id, rqd_id, assigned_user, div_num, item, sku, plus4, upc, ksn, qty, trans.salescheck, item_status, from_location, to_location, item_image, detail.store_number, stock_location, stock_quantity, thumbnail_desc, trans.request_number,trans.create_timestamp, escalation, escalation_time, item_seq, detail.created_by, detail.modified_by, delivered_quantity,ver,locker_eligible,item_id,detail.create_time from REQUEST_QUEUE_TRANS TRANS LEFT JOIN REQUEST_QUEUE_DETAILS detail on trans.rqt_id=detail.rqt_id  left join REQUEST_IDENTIFIER identifier on detail.rqt_id = identifier.rqt_id  left join REQUEST_QUEUE_META QM on concat(TRANS.request_type,(CASE WHEN TRANS.REQUEST_TYPE='LAYAWAY' then detail.layaway_type else '' end)) = QM.request_type  where trans.store_number=:store_number and QM.queue=:queue and trans.request_status IN ('OPEN') and identifier.type IN (1,2)  and detail.item_status=QM.required_status group by rqd_id
select.from.metatrans=SELECT rqt_id,request_type,store_format,store_number,create_timestamp,update_timestamp,salescheck,request_number,kiosk_name,pickup_status,pickup_start_time,pickup_end_time,pickup_assignee,request_status,originalJson,created_by,modified_by,original_trans_id,order_source FROM REQUEST_QUEUE_TRANS  where  (rqt_id = :RQT_ID and store_number= :store_number and request_status in (:status))
select.from.metatranspayment=SELECT PAYMENT_id,trans.rqt_id,type,account_number,amount,status,payment_date,trans.store_number,payment.created_by,payment.modified_by,expiration_date FROM request_queue_payment payment,request_queue_trans trans where trans.rqt_id=payment.rqt_id and trans.store_number = :store_number and payment.rqt_id  = :RQT_ID and trans.request_status in ('OPEN')
#select.from.metatranspayment=SELECT PAYMENT_id,rqt_id,type,account_number,amount,status,payment_date,store_number,created_by,modified_by,expiration_date FROM request_queue_payment where rqt_id in(select rqt_id from REQUEST_QUEUE_TRANS where store_number= :store_number and  salescheck = :salescheck and request_status in ('OPEN'))
select.from.metatransitem.with.salescheck1 = SELECT  concat(tran.request_type,(CASE WHEN TRAN.REQUEST_TYPE='LAYAWAY' then detail.layaway_type else '' end)) request_type ,detail.rqt_id,rqd_id,assigned_user,div_num,item,sku,plus4,upc,ksn,qty,detail.salescheck,item_status,from_location,to_location,item_image,detail.store_number,stock_location,stock_quantity,thumbnail_desc,full_name,detail.request_number,escalation,escalation_time,item_seq,detail.created_by,detail.modified_by,detail.return_reason,delivered_quantity,tran.create_timestamp,item_sale_type,transaction_type,item_sale_origin,ver,locker_eligible,item_id,detail.create_time,detail.qty_remaining,ffm_type FROM REQUEST_QUEUE_DETAILS detail,REQUEST_QUEUE_TRANS tran where  tran.rqt_id=detail.rqt_id and detail.store_number= :store_number and
select.from.metatransitem.with.salescheck2 = detail.rqd_id=:RQD_ID
select.from.metatransitem.with.salescheck3 = detail.rqt_id = :RQT_ID  and request_status in (:status)
select.from.metatransitem.with.salescheck3.withoutStatus = detail.rqt_id = :RQT_ID 
select.from.metatransitem.with.salescheck4 = and item_status IN (select REQUIRED_STATUS from request_queue_meta where request_type=concat(tran.request_type,(CASE WHEN TRAN.REQUEST_TYPE='LAYAWAY' then detail.layaway_type else '' end))) 
#SELECT  request_type,rqt_id,rqd_id,assigned_user,div_num,item,sku,plus4,upc,ksn,qty,salescheck,item_status,from_location,to_location,item_image,store_number,stock_location,stock_quantity,thumbnail_desc,full_name,request_number,escalation,escalation_time,item_seq,created_by,modified_by,delivered_quantity FROM REQUEST_QUEUE_DETAILS where  (salescheck = :salescheck and store_number= :store_number)
select.all.from.metatrans = SELECT rqt_id,request_type,store_format,store_number,create_timestamp,update_timestamp,salescheck,request_number,kiosk_name,pickup_status,pickup_start_time,pickup_end_time,pickup_assignee,request_status,originalJson,created_by,modified_by,original_trans_id,order_source FROM REQUEST_QUEUE_TRANS  where  (rqt_id = :RQT_ID and store_number= :store_number)
select.from.requestqueuemeta=select request_type,queue from request_queue_meta

select.from.package= SELECT PACKAGE_ID,lpad(package_number,6,0) package_number,rqt_id,from_location,to_location,create_timestamp,created_by,assigned_user,store_number FROM request_package where store_number = :STORE_NUMBER and rqt_id = :RQT_ID;
select.list.from.package= SELECT rqt_id FROM request_package where rqt_id in (:RQT_ID);
#SQL Constants for Insert  constants

insert.into.trans=INSERT INTO REQUEST_QUEUE_TRANS (REQUEST_TYPE, STORE_NUMBER, STORE_FORMAT, CREATE_TIMESTAMP, UPDATE_TIMESTAMP, SALESCHECK, REQUEST_NUMBER, KIOSK_NAME,  PICKUP_STATUS, PICKUP_START_TIME, PICKUP_END_TIME, PICKUP_ASSIGNEE, REQUEST_STATUS, ORIGINALJSON, CREATED_BY, MODIFIED_BY, CUSTOMER_ID, INSTALLER_FLAG, UNSECURED_FLAG,RETURN_PARENT_ID,PARENT_SALESCHECK,ORDER_SOURCE,LAYAWAY_FLAG, RETURN_AUTH_CODE,ORDER_ID) VALUES (:REQUEST_TYPE, :STORE_NUMBER, :STORE_FORMAT, :CREATE_TIMESTAMP, :UPDATE_TIMESTAMP, :SALESCHECK, :REQUEST_NUMBER, :KIOSK_NAME,  :PICKUP_STATUS, :PICKUP_START_TIME, :PICKUP_END_TIME, :PICKUP_ASSIGNEE, :REQUEST_STATUS, :ORIGINALJSON, :CREATED_BY, :MODIFIED_BY, :CUSTOMER_ID, :INSTALLER_FLAG, :UNSECURED_FLAG, :RETURN_PARENT_ID, :PARENT_SALESCHECK, :ORDER_SOURCE, :LAYAWAY_FLAG , :RETURN_AUTH_CODE,:ORDER_ID)
insert.into.identifier=INSERT INTO REQUEST_IDENTIFIER(RQT_ID,VALUE,TYPE,STORE_NUMBER) VALUES (:RQT_ID,:VALUE,:TYPE,:STORE_NUMBER)
insert.into.item=INSERT INTO REQUEST_QUEUE_DETAILS (RQT_ID, ASSIGNED_USER, DIV_NUM, ITEM, SKU,  PLUS4, UPC, KSN, QTY, ITEM_STATUS, FROM_LOCATION, TO_LOCATION, ITEM_IMAGE, STORE_NUMBER, STOCK_LOCATION, STOCK_QUANTITY, THUMBNAIL_DESC,  FULL_NAME, REQUEST_NUMBER, ESCALATION, ESCALATION_TIME, ITEM_SEQ, CREATED_BY, SALESCHECK, MODIFIED_BY,ITEM_ID)  VALUES (:RQT_ID, :ASSIGNED_USER, :DIV_NUM, :ITEM, :SKU,  :PLUS4, :UPC, :KSN, :QTY, :ITEM_STATUS, :FROM_LOCATION, :TO_LOCATION, :ITEM_IMAGE, :STORE_NUMBER, :STOCK_LOCATION, :STOCK_QUANTITY, :THUMBNAIL_DESC,  :FULL_NAME, :REQUEST_NUMBER, :ESCALATION, :ESCALATION_TIME, :ITEM_SEQ, :CREATED_BY,:SALESCHECK, :MODIFIED_BY,:ITEM_ID)

#insert.into.item_batch_update=INSERT INTO REQUEST_QUEUE_DETAILS (RQT_ID, ASSIGNED_USER, DIV_NUM, ITEM, SKU,  PLUS4, UPC, KSN, QTY, ITEM_STATUS, FROM_LOCATION, TO_LOCATION, ITEM_IMAGE, STORE_NUMBER, STOCK_LOCATION, STOCK_QUANTITY, THUMBNAIL_DESC,  FULL_NAME, REQUEST_NUMBER, ESCALATION, ESCALATION_TIME, ITEM_SEQ, CREATED_BY, MODIFIED_BY, SALESCHECK,ITEM_ID)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
#Insert query modified adding new columns
insert.into.item_batch_update=INSERT INTO REQUEST_QUEUE_DETAILS (RQT_ID, ASSIGNED_USER, DIV_NUM, ITEM, SKU,  PLUS4, UPC, KSN, QTY, ITEM_STATUS, FROM_LOCATION, TO_LOCATION, ITEM_IMAGE, STORE_NUMBER, STOCK_LOCATION, STOCK_QUANTITY, THUMBNAIL_DESC,  FULL_NAME, REQUEST_NUMBER, ESCALATION, ESCALATION_TIME, ITEM_SEQ, CREATED_BY, MODIFIED_BY, SALESCHECK,ITEM_ID,ITEM_SALE_TYPE,TRANSACTION_TYPE,ITEM_SALE_ORIGIN,LOCKER_ELIGIBLE,CREATE_TIME,LAYAWAY_TYPE,FFM_TYPE,qty_remaining, return_reason)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)

insert.into.payment=INSERT INTO REQUEST_QUEUE_PAYMENT (RQT_ID, TYPE, ACCOUNT_NUMBER, AMOUNT, STATUS, PAYMENT_DATE, EXPIRATION_DATE, STORE_NUMBER, CREATED_BY, MODIFIED_BY) VALUES (:RQT_ID, :TYPE, :ACCOUNT_NUMBER, :AMOUNT, :STATUS, :PAYMENT_DATE, :EXPIRATION_DATE, :STORE_NUMBER, :CREATED_BY, :MODIFIED_BY)
insert.into.activity=INSERT INTO REQUEST_ACTIVITY (RQT_ID,RQD_ID,CREATE_TIMESTAMP,TYPE,ASSIGNED_USER,STORE_NUMBER,FROM_LOCATION,TO_LOCATION,CREATED_BY,ACTIVITY_DESCRIPTION,ACTION_SEQ) VALUES(:RQT_ID,:RQD_ID,:CREATE_TIMESTAMP,:TYPE,:ASSIGNED_USER,:STORE,:FROM_LOCATION,:TO_LOCATION,:CREATED_BY,:ACTIVITY_DESCRIPTION,:ACTION_SEQ)
insert.into.task=

insert.activity=insert into request_activity(rqt_id,rqd_id,create_timestamp,action_seq,activity_description,store_number,from_location,assigned_user,to_location,created_by,type) values(:rqt_id,:rqd_id,curtime(),:seqNum,:action_desc,:store,:from_location,:assignedUser,:toLocation,:created_by,:type);

insert.into.package=insert into request_package (rqt_id, from_location, create_timestamp, created_by, store_number, package_number, to_location) values (:RQT_ID, :FROM_LOCATION, now(), :CREATED_BY, :STORE_NUMBER, lpad(:PKG_NBR,6,0), :TO_LOCATION);

#SQL Constants for Update  constants

updateTrans=UPDATE REQUEST_QUEUE_TRANS SET REQUEST_STATUS =:REQUEST_STATUS,update_timestamp = NOW() WHERE salescheck =:SALESNUM and request_number =:REQNUM and store_number =:STORE
updateDetails=UPDATE REQUEST_QUEUE_DETAILS SET ASSIGNED_USER =:ASSIGNED_USER ,ITEM_STATUS =:ITEM_STATUS WHERE salescheck=:SALESNUM and request_number=:REQNUM and item_seq =:SEQNO and store_number =:STORE
update.CardSwiped.Flag.In.Trans=UPDATE REQUEST_QUEUE_TRANS SET originalJson =:ORIGINALJSON, update_timestamp = NOW(), modified_by =:MODIFIED_BY WHERE rqt_id =:RQT_ID

update.item.details.mpu1 = update request_queue_details rqd set rqd.ver=rqd.ver+1 ,rqd.delivered_quantity = :QTY, rqd.item_status = :STATUS
#update_item_details_mpu2 = , rqd.to_location = :toLocation 
update.item.details.mpu3 = where rqd.store_number = :STORE and rqd.rqd_id = :RQD_ID and rqd.item_status = :currentStatus
#update_item_details_mpu4 = and rqd.div_num = :divNum and rqd.item = :itemNum and rqd.sku = :sku 
#update_item_details_mpu5 = and rqd.ksn = :ksn 
#update_item_details_mpu6 = and rqd.upc = :upc 
#update_item_details_mpu7 = and rqd.item_seq = :item_seq 
update.item.details.mpu8 =  , rqd.escalation_time = :ESCALATION_TIME
update.item.details.mpu4 = where rqd.store_number = :STORE and rqd.rqt_id = :RQT_ID and rqd.item_status = :currentStatus and rqd.layaway_type ='F'

update_order_status1 = update request_queue_trans rqt set rqt.request_status = :completeStatus,rqt.update_timestamp = :updateTime 
update_order_status2 = ,originalJson = :originalJson 
update_order_status4 = ,create_timestamp = :CREATE_TIMESTAMP 
update_order_status3 = where rqt.rqt_id in (:rqtList) and rqt.request_status = :openStatus and store_number = :storeNumber
new_update_order_status3 = where rqt.rqt_id in (:rqtList) and rqt.request_status !='EXPIRED' and store_number = :storeNumber


update_item_open = update request_queue_details set ver = 0,assigned_user=case when assigned_user is null then :ASSIGNED_USER else assigned_user end,item_status = case when item_status='BIN_PENDING' then 'BIN_PENDING' else :ITEM_STATUS end ,escalation=escalation+1,escalation_time=:ESCALATION_TIME where rqd_id in(:RQD_ID) and item_status in ('EXPIRED','BIN_PENDING')
check_request_cancel = SELECT count(*) as incomplete_count FROM request_queue_details where rqt_id=:rqtId and store_number=:strNum and  item_status NOT IN ('CANCELLED','VOIDED');
update_orders=UPDATE REQUEST_QUEUE_TRANS SET REQUEST_STATUS =:REQUEST_STATUS,update_timestamp =:updateTimeStamp WHERE rqt_id=:rqtId and store_number =:storeNumber
expire_items=update request_queue_details set item_status=:item_status where rqd_id in (:rqdList)
select_active_item_count = select count(*) from request_queue_details where item_status not in ('CANCELLED') and rqt_id=:RQT_ID
check_valid_order = select rqt.rqt_id,concat(rqt.request_status,';',rqt.create_timestamp) as key_valid from request_queue_trans rqt where rqt.store_number = :store_number and rqt.salescheck = :salescheck order by rqt.rqt_id desc;

update_item_qty=update request_queue_details set qty=:QTY,item_status=:ITEM_STATUS,from_location=:FROM_LOCATION,to_location=:TO_LOCATION,create_time=:CREATE_TIME,assigned_user=:ASSIGNED_USER where store_number=:STORE and rqd_id=:RQD_ID
update_mpu_locker_pin1 = update mpu_locker mpulck set mpulck.pin_no = :PIN_NO , mpulck.status = :STATUS
update_mpu_locker_pin2 = where mpulck.store_number = :STORE_NUMBER and mpulck.salescheck_no = :SALESCHECK and mpulck.locker_no = :LOCKER_NO  
get_pin_from_salescheck1 = select mpulck.reference_id,mpulck.store_number,mpulck.salescheck_no,mpulck.transaction_date,mpulck.locker_no,mpulck.pin_no,mpulck.status,mpulck.pin_recieved_date,mpulck.pickedup_initiated_date,mpulck.pickedup_date,mpulck.customer_name,mpulck.created_date,mpulck.created_by,mpulck.updated_date,mpulck.updated_by from mpu_locker mpulck
get_pin_from_salescheck2 = where mpulck.salescheck_no = :SALESCHECK_NO and mpulck.store_number = :STORE_NUMBER and mpulck.transaction_date >= TIMESTAMP(:TRANSACTION_DATE)
update_mpu_locker_status1=update mpu_locker set status = :STATUS 
update_pickup_initiateDate = ,PICKEDUP_INITIATED_DATE = :PICKEDUP_INITIATED_DATE
update_pickupDate=,PICKEDUP_DATE = :PICKEDUP_DATE
update_customerName=,CUSTOMER_NAME = :CUSTOMER_NAME
get_store_number=AND store_number = :STORE_NUMBER
update_mpu_locker_status2=where salescheck_no = :SALESCHECK and store_number = :STORE_NUMBER and locker_no = :LOCKER_NO
update_assigned_user=update request_queue_details set ver=ver+1, assigned_user=:ASSIGNED_USER, sears_sales_id=:SEARS_SALES_ID where rqd_id = :RQD_ID and store_number=:STORE_NUMBER
update_assigned_user1=update request_queue_details set ver=ver+1, assigned_user=:ASSIGNED_USER,sears_sales_id=:SEARS_SALES_ID where rqt_id = :RQT_ID and store_number=:STORE_NUMBER and layaway_type ='F'
update_assigned_user2=update request_queue_details set ver=ver+1, assigned_user=:ASSIGNED_USER , sears_sales_id=:SEARS_SALES_ID,item_status=CASE when ITEM_STATUS='OPEN' then 'ASSIGNED' else item_status end where rqd_id = :RQD_ID and store_number=:STORE_NUMBER 
update_assigned_user3=update request_queue_details set ver=ver+1, assigned_user=:ASSIGNED_USER,sears_sales_id=:SEARS_SALES_ID ,item_status=CASE when ITEM_STATUS='ASSIGNED' then 'OPEN' else item_status end where rqd_id = :RQD_ID and store_number=:STORE_NUMBER
update_order_status=update request_queue_trans set request_status=CASE when REQUEST_STATUS='WIP' then 'OPEN' else request_status end where rqt_id=:rqt_id and store_number=:store_number
update_package_bin=update request_package set to_location = :PACKAGE_BIN WHERE package_id=:PACKAGE_NUM
get_expired_order = select trans.request_number as requestNumber ,escalation_time as escTime,details.created_by from request_queue_trans trans,request_queue_details details where  trans.rqt_id=:RQT_ID and trans.store_number=:STORE_NUMBER and trans.rqt_id=details.rqt_id and  trans.request_status='OPEN' limit 1
select_item_qty_status = select qty from request_queue_details where rqd_id=:RQD_ID and store_number=:STORE

clear.previous.package =update request_package set rqt_id = null where rqt_id = :RQT_ID and store_number = :STORE_NUMBER
########################### Added for Direct2MPU ###########################
update_escalation=update request_queue_details set escalation=:escalation,escalation_time=:escalation_time where rqd_id=:rqd_id;
select_open_request = select rqt.rqt_id from request_queue_trans rqt where rqt.request_number = :requestNum and rqt.request_status in (:openStatus);
select.from.requestqueuedetails = SELECT request_type,detail.rqt_id,rqd_id,assigned_user,div_num,item,sku,plus4,upc,ksn,qty,detail.salescheck,item_status,from_location,to_location,item_image,detail.store_number,stock_location,stock_quantity,thumbnail_desc,full_name,detail.request_number,escalation,escalation_time,item_seq,detail.item_id,detail.created_by,detail.modified_by,delivered_quantity,tran.create_timestamp,item_sale_type,transaction_type,item_sale_origin,ver,locker_eligible,detail.create_time,detail.qty_remaining,detail.return_reason,detail.ffm_type FROM REQUEST_QUEUE_DETAILS detail,REQUEST_QUEUE_TRANS tran where  tran.rqt_id=detail.rqt_id and detail.store_number= :store_number and detail.rqt_id = :RQT_ID;
select.from.kiosk= SELECT store_no,kiosk_name,mod_enabled,sell_of_acc_flag,hold_go_flag,locker_enabled,mpu_direct FROM mcp_store_kiosk where store_no = :store_number;
select.from.mpudirect= SELECT store_no,kiosk_name,mod_enabled,sell_of_acc_flag,hold_go_flag,locker_enabled,mpu_direct FROM mcp_store_kiosk where store_no = :store_number and mpu_direct='Y';

select_associate_id=select assigned_user from request_activity where store_number=:STORE and rqt_id=:RQT_ID and rqd_id=:RQD_ID order by create_timestamp desc limit 1
select_pickup_activity=update request_activity set rqt_id=null,rqd_id=null where rqt_id=:RQT_ID and rqd_id=:RQD_ID and action_seq=100;
check_order_layaway = select distinct rqt_id from request_queue_details where salescheck=:SALESCHECK and layaway_type='F'
update.dtm.flag = UPDATE DJ_BUSINESS_DASHBOARD SET DTM_STATUS='Y', DTM_LASTUPDATE_TIME = NOW()
########################### LOCKER QUERY ###########################
insert.into.locker=INSERT INTO MPU_LOCKER (REFERENCE_ID,STORE_NUMBER,SALESCHECK_NO,TRANSACTION_DATE,LOCKER_NO,STATUS,CREATED_DATE,CREATED_BY,UPDATED_DATE,UPDATED_BY,CUSTOMER_NAME)VALUES (:REFERENCE_ID,:STORE_NUMBER,:SALESCHECK,:TRANSACTION_DATE,:LOCKER_NO,:STATUS,:CREATE_TIMESTAMP,:CREATED_BY,:UPDATE_TIMESTAMP,:UPDATED_BY,:CUSTOMER_NAME)
get_locker_report_date=where created_date >=:REPORT_START_DATE AND created_date< :REPORT_END_DATE 

########################### LOCKER QUERY ###########################
insert.into.locker=INSERT INTO MPU_LOCKER (REFERENCE_ID,STORE_NUMBER,SALESCHECK_NO,TRANSACTION_DATE,LOCKER_NO,STATUS,CREATED_DATE,CREATED_BY,UPDATED_DATE,UPDATED_BY,CUSTOMER_NAME)VALUES (:REFERENCE_ID,:STORE_NUMBER,:SALESCHECK,:TRANSACTION_DATE,:LOCKER_NO,:STATUS,:CREATE_TIMESTAMP,:CREATED_BY,:UPDATE_TIMESTAMP,:UPDATED_BY,:CUSTOMER_NAME)
select.from.locker_flag = SELECT LOCKER_ENABLED FROM mcp_store_kiosk WHERE STORE_NO= lpad(:STORE_NUMBER, 5, 0)

##########################COM START #################


select.com.report.jsr.help = select mt.rqt_id,mt.salescheck,mt.associate_id,mt.pickup_source,DATE_FORMAT(mt.end_time,'%H:%i:%S')  as time,mt.end_time,mt.original_salescheck,mt.customer_name,mt.request_status,mt.type,DATE_FORMAT(mt.end_time,'%m/%d/%Y')  as mxTime, if(TIME_TO_SEC(TIMEDIFF(mt.end_time,mt.start_time))>=300 , 'Yes', 'No') as couponIndicator, (case when (select count(*) from request_identifier r1 where type='4' and r1.rqt_id=mt.rqt_id) > 0 then (select value from request_identifier r1 where type='4' and r1.rqt_id=mt.rqt_id) else '' end) as phoneNo, case when (select count(*) from request_identifier r1 where type='18' and r1.rqt_id=mt.rqt_id) > 0 then (select value from request_identifier r1 where type='18' and r1.rqt_id=mt.rqt_id) else 'No' end as vehicle from request_mpu_trans mt where mt.request_status in ('COMPLETED') and mt.type in('HELP','REPAIRPICK') and mt.store_number = :STORE_NUMBER
select.com.report.jsr.todayjournal = and CAST(mt.end_time AS DATE) = :TODAY_DATE

select.com.report.jsrd = select mt.original_salescheck,mt.start_time as time_start,mt.salescheck,mt.rqt_id,DATE_FORMAT(mt.start_time,'%m/%d/%Y') as start_time,DATE_FORMAT(mt.start_time,'%H:%i:%S') as time,mt.trans_id,case when mt.associate_id IS NULL then qd.assigned_user else mt.associate_id end as associate_id,mt.ASSOCIATE_NAME,md.trans_detail_id, md.not_delivered_quantity,mt.type,md.requested_quantity, md.delivered_quantity,md.item_status,qd.div_num,qd.item,qd.sku,qd.plus4,qd.thumbnail_desc,qd.item_seq,qt.originaljson from request_mpu_trans mt left outer join request_mpu_details md on mt.trans_id = md.trans_id left outer join request_queue_trans qt on mt.rqt_id = qt.rqt_id left outer join request_queue_details qd on qd.rqd_id = md.rqd_id where mt.rqt_id = :RQT_ID and md.item_status in ('PICKED_UP','NOT_DELIVER','RETURNED');

select.com.report.jsr.completed = select *,(case when instr(couponInd,"Yes") > 0 then "Yes" else "No" end) couponIndicator from ( select associate_id,pickup_source,time,rqt_id,DATE_FORMAT(mxTime,'%m/%d/%Y') as mxTime,item_status,rqd_id,end_time,couponInd,salescheck,kiosk,original_salescheck,customer_name,vehicle,request_status,type,phoneNo from( select max(end_time)as mxTime, group_concat(if(TIME_TO_SEC(TIMEDIFF(end_time,start_time))>=300 , 'Yes', 'No')) as couponInd,mt.trans_id,mt.pickup_source,mt.associate_id,DATE_FORMAT(mt.end_time,'%H:%i:%S')  as time,mt.end_time,mt.start_time,mt.rqt_id,mt.salescheck,mt.original_salescheck,mt.customer_name, mt.request_status,md.item_status,mt.type,mt.kiosk,md.rqd_id, case when (select count(*) from request_identifier r1 where type='18' and r1.rqt_id=mt.rqt_id) > 0 then (select value from request_identifier r1 where type='18' and r1.rqt_id=mt.rqt_id) else 'No' end as vehicle, case when (select count(*) from request_identifier r1 where type='4' and r1.rqt_id=mt.rqt_id) > 0 then (select value from request_identifier r1 where type='4' and r1.rqt_id=mt.rqt_id) else '' end as phoneNo from request_mpu_trans mt left outer join request_mpu_details md on mt.trans_id = md.trans_id left outer join request_queue_details qd on md.rqd_id = qd.rqd_id where (mt.request_status='PICKED_UP' or mt.request_status='RETURNED') and md.item_status not in ('NOT_DELIVER') and mt.store_number = :STORE_NUMBER
select.com.report.jsr.notdelivered = select *,(case when instr(couponInd,"YES") > 0 then "YES" else "NO" end) couponIndicator from ( select * from( select max(DATE_FORMAT(end_time,'%m/%d/%Y'))as mxTime,mt.pickup_source,mt.end_time, group_concat(if(TIME_TO_SEC(TIMEDIFF(end_time,start_time))>=300 , 'Yes', 'No')) as couponInd, mt.trans_id,mt.associate_id,DATE_FORMAT(mt.end_time,'%H:%i:%S')  as time,mt.start_time,mt.rqt_id,mt.salescheck,mt.original_salescheck,mt.customer_name,mt.request_status, mt.type,md.item_status,md.delivered_quantity, md.not_delivered_quantity, (case when (select count(*) from request_identifier r1 where type='18' and r1.rqt_id=mt.rqt_id) > 0 then (select value from request_identifier r1 where type='18' and r1.rqt_id=mt.rqt_id) else 'No' end)as vehicle, case when (select count(*) from request_identifier r1 where type='4' and r1.rqt_id=mt.rqt_id) > 0 then (select value from request_identifier r1 where type='4' and r1.rqt_id=mt.rqt_id) else '' end as phoneNo from request_mpu_trans mt left outer join request_mpu_details md on mt.trans_id = md.trans_id left outer join request_queue_details qd on md.rqd_id = qd.rqd_id where ((md.item_status = 'PICKED_UP' and md.not_delivered_quantity > 0 ) or (md.item_status = 'NOT_DELIVER')) and mt.store_number =:STORE_NUMBER
select.com.report.jsr.all = select *,(case when instr(couponInd,"Yes") > 0 then "Yes" else "No" end) couponIndicator from ( select rqt_id,DATE_FORMAT(mxTime,'%m/%d/%Y') as mxTime,pickup_source,associate_id,time,end_time,couponInd,salescheck,original_salescheck,customer_name,vehicle,request_status,type,phoneNo from( select max(end_time)as mxTime, group_concat(if(TIME_TO_SEC(TIMEDIFF(end_time,start_time))>=300 , 'Yes', 'No')) as couponInd,mt.trans_id,mt.associate_id,DATE_FORMAT(mt.end_time,'%H:%i:%S')  as time,mt.end_time,mt.pickup_source,mt.start_time,mt.rqt_id,mt.salescheck,mt.original_salescheck,mt.customer_name, mt.request_status,mt.type, case when (select count(*) from request_identifier r1 where type='18' and r1.rqt_id=mt.rqt_id) > 0 then (select value from request_identifier r1 where type='18' and r1.rqt_id=mt.rqt_id) else 'No' end as vehicle, case when (select count(*) from request_identifier r1 where type='4' and r1.rqt_id=mt.rqt_id) > 0 then (select value from request_identifier r1 where type='4' and r1.rqt_id=mt.rqt_id) else '' end as phoneNo from request_mpu_trans mt left outer join request_mpu_details md on mt.trans_id = md.trans_id left outer join request_queue_details qd on md.rqd_id = qd.rqd_id where (mt.request_status='PICKED_UP' or mt.request_status='RETURNED') and mt.store_number = :STORE_NUMBER

select.com.report.jsr.salescheckfilter = and mt.original_salescheck = :SALESCHECK
select.com.report.jsr.salescheckfilter1 = and mt.salescheck = :SALESCHECK
select.com.report.jsr.custfirstnamefilter = and substring(customer_name,1,instr(customer_name,' ')) = :CUSTFIRSTNAME
select.com.report.jsr.custlastnamefilter = and substring(customer_name,instr(customer_name,' ')+1)= :CUSTLASTNAME
select.com.report.jsr.kiosk = and mt.kiosk = :KIOSKNAME
select.com.report.jsr.daydatefilter = and CAST(mt.end_time AS DATE) = :DAYDATE 
select.com.report.jsr.daterangefilter = and CAST(mt.end_time AS DATE) between :DAYDATE  and :TODATE
select.com.report.jsr.divfilter = and qd.div_num = :DIVNUM
select.com.report.jsr.itemfilter = and qd.item= :ITEM
select.com.report.jsr.skufilter = and qd.sku = :SKU
select.com.report.jsr.plus4filter = and qd.plus4 = :PLUS4
select.com.report.jsr.assocnofilter = and mt.sears_sales_id = :SEARS_SALES_ID
select.com.report.jsr.groupby = group by rqt_id order by mt.end_time desc) as test ) as test2

select.com.report.exception.mpu = select mt.original_salescheck as salescheck,mt.customer_name,qd.div_num,qd.item,qd.sku,qd.plus4,qd.qty,qd.qty_remaining,qd.thumbnail_desc,mt.type as request_type,DATE_FORMAT(mt.start_time,'%H:%i:%S') as start_time,md.item_status , sum(md.requested_quantity), qd.rqd_id,qd.qty, ((qd.qty - qd.qty_remaining) - sum(md.requested_quantity)) as qty_shipped from request_mpu_trans mt left outer join request_mpu_details md on mt.trans_id = md.trans_id left outer join request_queue_details qd on md.rqd_id = qd.rqd_id where  
select.com.report.exception.wherempu = CAST(mt.start_time AS DATE) = :SELECT_DATE and mt.store_number = :STORE_NUMBER and qd.is_active= :IS_ACTIVE and (mt.type in ('PICKUP','RETURN') and mt.request_status in ('OPEN') and md.item_status in ('OPEN')) group by qd.rqd_id
select.com.report.exception.queue = select qt.rqt_id,qd.rqd_id,qt.salescheck,qd.assigned_user as assigneduser,qd.div_num,qd.item,qd.sku,qd.plus4,qd.qty,qd.is_active,qty_remaining, qd.delivered_quantity as qty_shipped,qd.thumbnail_desc,qt.request_type,qd.item_status, DATE_FORMAT(qt.create_timestamp,'%H:%i:%S') as start_time, case when (select count(*) from request_identifier r1 where type='2' and r1.rqt_id=qt.rqt_id) > 0 then (select value from request_identifier r1 where type='2' and r1.rqt_id=qt.rqt_id) else 'null' end as customer_name from request_queue_trans qt left outer join request_queue_details qd on qt.rqt_id = qd.rqt_id where
select.com.report.exception.wherestagequeue = (qt.request_type in ('STAGE','BINSTAGE','LAYAWAY') and qd.item_status in ('OPEN','STAGED','BIN_PENDING','BINNED','PACKAGE_PENDING') or qd.item_status in ('RSTK_PEND_CNL','RSTK_PEND_VOID','CLOSED','CANCELLED','VOIDED')) and 
select.com.report.exception.wherecancelclosedqueue = qt.store_number = :STORE_NUMBER and CAST(qt.create_timestamp AS DATE) = :SELECT_DATE and qd.is_active= :IS_ACTIVE group by qd.rqd_id;
select.com.report.update = UPDATE request_queue_details SET is_active=:IS_ACTIVE WHERE store_number = :STORE_NUMBER and rqd_id =:RQD_ID

select.com.kiosklist = select distinct(msk.kiosk_name) from mcp_store_kiosk msk where msk.store_no = :storeNumber
##########################COM END #################

########################### CSM QUERY PROPERTIES  ########################################
insert.into.csm_task=INSERT INTO CSM_TASK (STORE_NUMBER,TASK_TYPE_ID,RQT_ID,CREATED_BY,CREATED_DATE,UPDATED_BY,UPDATED_DATE,CSM_TASK_STATUS) VALUES (:STORE_NUMBER,:TASK_TYPE_ID,:RQT_ID,:CREATED_BY,:CREATED_DATE,:UPDATED_BY,:UPDATED_DATE,:CSM_TASK_STATUS);
insert.into.csm_task_detail=INSERT INTO CSM_TASK_DETAIL (CSM_TASK_ID,CSM_DISPLAY_FIELD,CSM_DISPLAY_VALUE,STORE_NUMBER) VALUES(:CSM_TASK_ID,:CSM_DISPLAY_FIELD,:CSM_DISPLAY_VALUE,:STORE_NUMBER);
select.from.csm_task=SELECT T.CSM_TASK_ID AS CSM_TASK_ID,T.STORE_NUMBER AS STORE_NUMBER,T.TASK_TYPE_ID AS TASK_TYPE_ID ,RQT_ID,CREATED_BY,CREATED_DATE,UPDATED_BY,UPDATED_DATE,CSM_TASK_STATUS,TASK_DESCRIPTION,CSM_DISPLAY_FIELD,CSM_DISPLAY_VALUE FROM CSM_TASK T,CSM_TASK_TYPE TT,CSM_TASK_DETAIL TD WHERE T.STORE_NUMBER = :STORE_NUMBER AND CSM_TASK_STATUS=:CSM_TASK_STATUS AND T.TASK_TYPE_ID=TT.TASK_TYPE_ID AND T.CSM_TASK_ID = TD.CSM_TASK_ID ORDER BY CREATED_DATE;
select.from.csm_task_detail=SELECT CSM_TASK_DETAIL_ID,CSM_TASK_ID,CSM_DISPLAY_FIELD,CSM_DISPLAY_VALUE FROM CSM_TASK_DETAIL
update.csm_task=UPDATE CSM_TASK SET CSM_TASK_STATUS=:CSM_TASK_STATUS,UPDATED_BY=:UPDATED_BY,UPDATED_DATE=:UPDATED_DATE WHERE CSM_TASK_ID=:CSM_TASK_ID and CSM_TASK_STATUS = 'OPEN';
update.open.csm.tasks=UPDATE CSM_TASK SET CSM_TASK_STATUS='Complete',UPDATED_BY='MPU_BATCH',UPDATED_DATE=now() WHERE CSM_TASK_STATUS='OPEN' ;
#get_csm_task_id =select csm_task_id from csm_task task,csm_task_detail det where task.CSM_TASK_ID = det.CSM_TASK_ID and det.CSM_DISPLAY_FIELD = "ITEM_ID" and det.CSM_DISPLAY_VALUE = :RQD_ID and store_number=:STORE and task_type_id=:TASK_TYPE_ID and rqt_id=:RQT_ID and csm_task_status=:CSM_TASK_STATUS
get_csm_task_id = select task.csm_task_id from csm_task task,csm_task_detail det where task.CSM_TASK_ID = det.CSM_TASK_ID and det.CSM_DISPLAY_FIELD = "ITEM_ID" and det.CSM_DISPLAY_VALUE = :RQD_ID and task.store_number=:STORE and task.task_type_id=:TASK_TYPE_ID and task.rqt_id=:RQT_ID and task.csm_task_status=:CSM_TASK_STATUS
#update_date_for_task=update CSM_TASK set created_date=:CREATED_DATE where csm_task_id=:CSM_TASK_ID and store_number=:STORE
update_date_for_task=update CSM_TASK set CSM_TASK_STATUS ='Complete' where csm_task_id=:CSM_TASK_ID and store_number=:STORE
csm.miss.confirm.check=select count(*) from csm_task A, csm_task_detail B where A.csm_task_id = B.csm_task_id and A.rqt_id = :RQT_ID and B.csm_display_field = 'ITEM_ID' and B.csm_display_value = :RQD_ID and A.store_number = :STORE and csm_task_status='OPEN' and (A.task_type_id=8 or A.task_type_id=11)
update_post_void_item = update request_queue_details set from_location=:FROM_LOCATION,item_status=:ITEM_STATUS,qty=:QTY ,delivered_quantity=:DELIVERED_QUANTITY,qty_remaining=:REMAINING_QUANTITY where rqd_id=:RQD_ID and store_number=:STORE_NUMBER 
update_post_void_request = update request_queue_trans set request_status=:REQUEST_STATUS where rqt_id=:RQT_ID and store_number=:STORE_NUMBER
########################## ACTIVITY REPORT QUERY DETAILS #################################
insert.into.web_response_associate_activity_report=insert into web_response_associate_activity_report(STORE_NUMBER,ASSOCIATE_ID,CREATED_DATE,SALESCHECK_NO,ITEM_IDENTIFIER,WORK_STATUS,ITEM_STATUS) values(:STORE_NUMBER,:ASSOCIATE_ID,:CREATED_DATE,:SALESCHECK_NO,:ITEM_IDENTIFIER,:WORK_STATUS,:ITEM_STATUS);
### change done by shipra to include field Relatedsalescheck field in insert.into.request_mpu_trans query ###
insert.into.request_mpu_trans=insert into request_mpu_trans(STORE_NUMBER,ASSOCIATE_ID,TYPE,RQT_ID,START_TIME,REQUEST_STATUS,SEARCH_METHOD,SEARCH_VALUE,KIOSK,ORIGINAL_SALESCHECK,CARD_SWIPED,CUSTOMER_NAME,SALESCHECK,ORIGINALJSON,RETURN_AUTH_CODE,PICKUP_SOURCE,SC_SCAN) values(:STORE_NUMBER,:ASSOCIATE_ID,:TYPE,:RQT_ID,:START_TIME,:REQUEST_STATUS,:SEARCH_METHOD,:SEARCH_VALUE,:KIOSK,:ORIGINAL_SALESCHECK,:CARD_SWIPED,:CUSTOMER_NAME, :SALESCHECK, :ORIGINALJSON,:RETURNAUTHCODE,:PICKUP_SOURCE,:SC_SCAN);
insert.into.request_mpu_details=insert into request_mpu_details(TRANS_ID,RQD_ID,REQUESTED_QUANTITY,ITEM_STATUS,CREATE_TIMESTAMP,STORE_NUMBER,not_delivered_quantity) values(:TRANS_ID,:RQD_ID,:REQUESTED_QUANTITY,:ITEM_STATUS,:CREATE_TIMESTAMP,:STORE_NUMBER,:NOT_DELIVERED_QTY);
select.from.webResponse.sql=select STORE_NUMBER,if(ASSOCIATE_ID is null,'000000',ASSOCIATE_ID) ASSOCIATE_ID,case when time(created_date) between '00:00:00' and '13:59:59' then '1'   when time(created_date) between '14:00:00' and '16:59:59' then '2'   when time(created_date) between '17:00:00' and '23:59:59' then '3'end 'PERIOD_CODE',SUM(if (work_status='EXPIRED',1,0)) NR_COUNT, SUM(if (work_status='COMPLETED' && item_status='CLOSED',1,0)) 'OS_COUNT',  SUM(if (work_status='COMPLETED' && item_status='BINNED',1,0)) 'BINNED_COUNT'  from web_response_associate_activity_report  where created_date between :REPORT_START_DATE AND :REPORT_END_DATE group by store_number,associate_id,period_code;
select.from.activityReportQuery.sql=select STORE_NUMBER,if(ASSOCIATE_ID is null,'000000',ASSOCIATE_ID) ASSOCIATE_ID,case when time(created_date) between '00:00:00' and '13:59:59' then '1'   when time(created_date) between '14:00:00' and '16:59:59' then '2'   when time(created_date) between '17:00:00' and '23:59:59' then '3'end 'PERIOD_CODE',SUM(if (work_status='EXPIRED',1,0)) NR_COUNT, SUM(if (work_status='COMPLETED' && item_status='CLOSED',1,0)) 'OS_COUNT',  SUM(if (work_status='COMPLETED' && item_status='BINNED',1,0)) 'BINNED_COUNT'  from web_response_associate_activity_report  where created_date between :REPORT_START_DATE AND :REPORT_END_DATE group by store_number,associate_id,period_code;
select.ohm.details_open=select type,ASSOCIATE_ID,original_salescheck,salescheck,start_time,end_time,request_status,CUSTOMER_NAME,COUPON_GENERATED,ASSOCIATE_NAME,RETURN_AUTH_CODE from request_mpu_trans where kiosk=:KIOSK and start_time>=:REPORT_START_DATE and start_time<:REPORT_END_DATE and request_status in ('OPEN') AND store_number = :STORE_NUMBER and type <> 'POSMESSAGE'
select.ohm.details_completed=select type,ASSOCIATE_ID,original_salescheck,salescheck,start_time,end_time,request_status,CUSTOMER_NAME,COUPON_GENERATED,ASSOCIATE_NAME,RETURN_AUTH_CODE from request_mpu_trans where kiosk=:KIOSK and start_time>=:REPORT_START_DATE and start_time<:REPORT_END_DATE and request_status in ('PICKED_UP','COMPLETED','RETURNED') AND store_number = :STORE_NUMBER and type <> 'POSMESSAGE' order by end_time DESC
update.salescheck=,salescheck=:SALESCHECK
update.associate_Id=,ASSOCIATE_ID=:ASSOCIATE_ID
update.associate_Name=,ASSOCIATE_NAME=:ASSOCIATE_NAME
select.condition=where rqt_id=:RQT_ID and request_status in ('OPEN','assigned')
update.request_mpu_trans=update request_mpu_trans set END_TIME=:END_TIME,request_status=:REQUEST_STATUS,COUPON_GENERATED=:COUPON_GENERATED 
update.request_mpu_details=update request_mpu_details set UPDATE_TIMESTAMP=:UPDATE_TIMESTAMP,ITEM_STATUS=:ITEM_STATUS,DELIVERED_QUANTITY=:DELIVERED_QUANTITY,NOT_DELIVERED_QUANTITY=:NOT_DELIVERED_QUANTITY where rqd_id=:RQD_ID and ITEM_STATUS='OPEN'
select.helpRequests=SELECT store_number,if(sears_sales_id is null,'000000',sears_sales_id) associate_id,case when time(start_time) between '00:00:00' and '13:59:59' then '1' when time(start_time) between '14:00:00' and '16:59:59' then '2' when time(start_time) between '17:00:00' and '23:59:59' then '3' end 'PERIOD_CODE',SUM(IF(type = 'HELP', 1, 0)) HELP_REQUESTS FROM request_mpu_trans WHERE start_time >= :REPORT_START_DATE  AND start_time < :REPORT_END_DATE and type='HELP' GROUP BY store_number,associate_id,PERIOD_CODE;
select.pickUpOrders=SELECT store_number,if(sears_sales_id is null,'000000',sears_sales_id) associate_id, case when time(end_time) between '00:00:00' and '13:59:59' then '1' when time(end_time) between '14:00:00' and '16:59:59' then '2' when time(end_time) between '17:00:00' and '23:59:59' then '3' end 'PERIOD_CODE', COUNT(trans_id) 'TOTAL_PICKUP_ORDERS', sum(requested_quantity) REQUESTED_ITEMS, sum(delivered_quantity) DELIVERED_ITEMS, CONCAT(if(abs(TRUNCATE(SUM(pick_time_taken) / 60, 0)) > 999,999,abs(TRUNCATE(SUM(pick_time_taken) / 60, 0))),':',abs(SUM(pick_time_taken) % 60)) 'TOTAL_DURATION', CONCAT(abs(TRUNCATE(MAX(pick_time_taken) / 60, 0)),':',abs(MAX(pick_time_taken) % 60)) 'LONGEST_DURATION', concat(abs(TRUNCATE(MIN(pick_time_taken) / 60, 0)),':',abs(MIN(pick_time_taken) % 60)) 'SHORTEST_DURATION' FROM (SELECT rmt.store_number store_number,rmt.trans_id trans_id,sears_sales_id,end_time,sum(requested_quantity) requested_quantity,sum(delivered_quantity) delivered_quantity,if(abs(TIME_TO_SEC(TIMEDIFF(end_time, start_time))) > 59999, 59999, abs(TIME_TO_SEC(TIMEDIFF(end_time, start_time)))) pick_time_taken FROM  request_mpu_trans rmt,request_mpu_details rmd WHERE end_time IS NOT NULL AND start_time >= :REPORT_START_DATE AND start_time < :REPORT_END_DATE and request_status in ('PICKED_UP') and rmt.trans_id = rmd.trans_id  and type = 'PICKUP' GROUP BY rmt.trans_id) unique_work_withtime GROUP BY store_number, associate_id, PERIOD_CODE;
select.activeUsers=select distinct user_id,if(associate_id is null,'000000',associate_id) associate_id FROM mcp_active_user where logged_in_time>=:REPORT_START_DATE and logged_in_time< :REPORT_END_DATE;
select.couponsForPickup=select distinct store_number, if(sears_sales_id is null,'000000',sears_sales_id) associate_id, PERIOD_CODE, sum(if(puTime <= 300, 1, 0)) 'TOTAL_ON_TIME', sum(if(puTime > 300, 1, 0)) 'TOTAL_COUPONS' from (select  store_number,TIME_TO_SEC(timediff(end_time, start_time)) 'puTime',sears_sales_id,case when time(start_time) between '00:00:00' and '13:59:59' then '1' when time(start_time) between '14:00:00' and '16:59:59' then '2' when time(start_time) between '17:00:00' and '23:59:59' then '3' end 'PERIOD_CODE' from  request_mpu_trans where start_time >= :REPORT_START_DATE and start_time < :REPORT_END_DATE and request_status in('PICKED_UP') and type='PICKUP' and end_time IS NOT NULL group by trans_id) inner1 group by store_number , associate_id , PERIOD_CODE;
########## TO DO
select.totalTenderStoreReturnsCancelled=Select store_number, if(sears_sales_id is null,'000000',sears_sales_id) associate_id, case when time(start_time) between '00:00:00' and '13:59:59' then '1' when time(start_time) between '14:00:00' and '16:59:59' then '2' when time(start_time) between '17:00:00' and '23:59:59' then '3' end 'PERIOD_CODE', count(trans_id) 'TOTAL_CANCELLED' FROM request_mpu_trans where type='RETURNIN5' and request_status in ('CANCELLED') and start_time >= :REPORT_START_DATE AND start_time < :REPORT_END_DATE  group by store_number , associate_id,PERIOD_CODE;
select.totalTenderReturnsByStore=SELECT  store_number, if(sears_sales_id is null,'000000',sears_sales_id) associate_id, case when time(start_time) between '00:00:00' and '13:59:59' then '1' when time(start_time) between '14:00:00' and '16:59:59' then '2' when time(start_time) between '17:00:00' and '23:59:59' then '3' end 'PERIOD_CODE', COUNT(trans_id) 'TOTAL_RETURNS', CONCAT(TRUNCATE(SUM(pick_time_taken) / 60, 0),':',SUM(pick_time_taken) % 60) 'TOTAL_DURATION', CONCAT(TRUNCATE(MAX(pick_time_taken) / 60, 0),':',MAX(pick_time_taken) % 60) 'LONGEST_DURATION', concat(TRUNCATE(MIN(pick_time_taken) / 60, 0),':',MIN(pick_time_taken) % 60) 'SHORTEST_DURATION', sum(if(pick_time_taken <= 300, 1, 0)) 'TOTAL_ON_TIME', sum(if(pick_time_taken > 300, 1, 0)) 'TOTAL_COUPONS' FROM (SELECT trans_id,store_number,sears_sales_id,start_time,if(abs(TIME_TO_SEC(TIMEDIFF(end_time, start_time))) > 59999, 59999, abs(TIME_TO_SEC(TIMEDIFF(end_time, start_time)))) pick_time_taken FROM request_mpu_trans rmt where type='RETURNIN5' AND request_status = 'RETURNED' AND end_time IS NOT NULL AND start_time >= :REPORT_START_DATE AND start_time < :REPORT_END_DATE GROUP BY trans_id) inner1 GROUP BY store_number;
select.totalTenderReturnsByAssociate=SELECT  store_number, if(sears_sales_id is null,'000000',sears_sales_id) associate_id, case when time(start_time) between '00:00:00' and '13:59:59' then '1' when time(start_time) between '14:00:00' and '16:59:59' then '2' when time(start_time) between '17:00:00' and '23:59:59' then '3' end 'PERIOD_CODE', COUNT(trans_id) 'TOTAL_RETURNS', CONCAT(TRUNCATE(SUM(pick_time_taken) / 60, 0),':',SUM(pick_time_taken) % 60) 'TOTAL_DURATION', CONCAT(TRUNCATE(MAX(pick_time_taken) / 60, 0),':',MAX(pick_time_taken) % 60) 'LONGEST_DURATION', concat(TRUNCATE(MIN(pick_time_taken) / 60, 0),':',MIN(pick_time_taken) % 60) 'SHORTEST_DURATION', sum(if(pick_time_taken <= 300, 1, 0)) 'TOTAL_ON_TIME', sum(if(pick_time_taken > 300, 1, 0)) 'TOTAL_COUPONS' FROM (SELECT trans_id,store_number,sears_sales_id,start_time,if(abs(TIME_TO_SEC(TIMEDIFF(end_time, start_time))) > 59999, 59999, abs(TIME_TO_SEC(TIMEDIFF(end_time, start_time)))) pick_time_taken FROM request_mpu_trans rmt where type='RETURNIN5' AND request_status = 'RETURNED' AND end_time IS NOT NULL AND start_time >= :REPORT_START_DATE  AND start_time < :REPORT_END_DATE GROUP BY trans_id) inner1 GROUP BY associate_id order by store_number;
########## TO DO
select.totalExchangeCouponsSummary=select inner1.store_number store_number, if(sears_sales_id is null, '000000', sears_sales_id) associate_id, case when time(start_time) between '00:00:00' and '13:59:59' then '1' when time(start_time) between '14:00:00' and '16:59:59' then '2' when time(start_time) between '17:00:00' and '23:59:59' then '3' end 'PERIOD_CODE', count(trans_id) 'TOTAL_EXCHANGES_REQUESTED', sum(if(request_status = 'PICKED_UP', 1, 0)) 'TOTAL_EXCHANGES_COMPLETED', sum(if(pick_time_taken > 300, 1, 0)) 'TOTAL_COUPONS', sum(if(pick_time_taken <= 300, 1, 0)) 'TOTAL_ON_TIME', sum(if(request_status = 'CANCELLED', 1, 0)) as 'TOTAL_CANCELLED' FROM (select     rmt.trans_id trans_id,request_status, sears_sales_id,rmt.store_number store_number,start_time,if(abs(TIME_TO_SEC(TIMEDIFF(end_time, start_time))) > 59999, 59999, abs(TIME_TO_SEC(TIMEDIFF(end_time, start_time)))) pick_time_taken from request_mpu_trans rmt where type in('EXCHANGEIN5','EXCHANGEIN5RETURN') and end_time IS NOT NULL AND start_time >= :REPORT_START_DATE AND start_time < :REPORT_END_DATE ) inner1 group by store_number , associate_id , PERIOD_CODE;
select.totalExchanges=SELECT  store_number, if(sears_sales_id is null,'000000',sears_sales_id) associate_id, case when time(start_time) between '00:00:00' and '13:59:59' then '1' when time(start_time) between '14:00:00' and '16:59:59' then '2' when time(start_time) between '17:00:00' and '23:59:59' then '3' end 'PERIOD_CODE', COUNT(trans_id) 'TOTAL_EXCHANGES', CONCAT(TRUNCATE(SUM(pick_time_taken) / 60, 0),':',SUM(pick_time_taken) % 60) 'TOTAL_DURATION', CONCAT(TRUNCATE(MAX(pick_time_taken) / 60, 0),':', MAX(pick_time_taken) % 60) 'LONGEST_DURATION', concat(TRUNCATE(MIN(pick_time_taken) / 60, 0),':',MIN(pick_time_taken) % 60) 'SHORTEST_DURATION' FROM (SELECT  trans_id,store_number,sears_sales_id,start_time,if(abs(TIME_TO_SEC(TIMEDIFF(end_time, start_time))) > 59999, 59999, abs(TIME_TO_SEC(TIMEDIFF(end_time, start_time)))) pick_time_taken FROM  request_mpu_trans rmt where type='EXCHANGEIN5' AND request_status = 'PICKED_UP' AND end_time IS NOT NULL AND start_time >= :REPORT_START_DATE AND start_time < :REPORT_END_DATE  GROUP BY trans_id) inner1 GROUP BY associate_id ORDER by store_number;

########################### PICK UP QUERIES #######################
#Query changed for JIRA-25084 (platform pickup- pages from register are not coming to MPU)
#select.from.request_mpu_trans = SELECT request_mpu_trans.pickup_source,request_mpu_trans.sc_scan, request_mpu_trans.trans_id, request_mpu_trans.type, request_mpu_trans.start_time, request_mpu_trans.end_time, request_mpu_trans.associate_id, request_mpu_trans.search_method, request_mpu_trans.search_value, request_mpu_trans.kiosk, request_mpu_trans.store_number, request_mpu_trans.salescheck, request_mpu_trans.original_salescheck, request_mpu_trans.request_status, request_mpu_trans.CUSTOMER_NAME, request_mpu_trans.card_swiped, request_mpu_trans.rqt_id, request_queue_trans.store_format, request_queue_trans.originalJson, request_queue_trans.customer_id,request_queue_trans.order_source, request_queue_trans.layaway_flag, request_queue_trans.installer_flag, request_queue_trans.unsecured_flag ,request_queue_trans.request_type FROM REQUEST_MPU_TRANS request_mpu_trans LEFT OUTER JOIN REQUEST_QUEUE_TRANS request_queue_trans ON request_queue_trans.rqt_id = request_mpu_trans.rqt_id WHERE request_mpu_trans.request_status = 'OPEN' AND request_mpu_trans.kiosk = :KIOSK AND lpad(request_mpu_trans.store_number, 5, 0) = lpad(:STORE_NUMBER, 5, 0)
select.from.request_mpu_trans = SELECT request_mpu_trans.pickup_source,request_mpu_trans.sc_scan, request_mpu_trans.trans_id, request_mpu_trans.type, request_mpu_trans.start_time, request_mpu_trans.end_time, request_mpu_trans.associate_id, request_mpu_trans.search_method, request_mpu_trans.search_value, request_mpu_trans.kiosk, request_mpu_trans.store_number, request_mpu_trans.salescheck, request_mpu_trans.original_salescheck, request_mpu_trans.request_status, request_mpu_trans.CUSTOMER_NAME, request_mpu_trans.card_swiped, request_mpu_trans.rqt_id, request_queue_trans.store_format, if(type IN ('PICKUP','EXCHANGEIN5'), request_queue_trans.originalJson,request_mpu_trans.originalJson) as originalJson, request_queue_trans.customer_id,request_queue_trans.order_source, request_queue_trans.layaway_flag, request_queue_trans.installer_flag, request_queue_trans.unsecured_flag ,request_queue_trans.request_type, request_mpu_trans.return_auth_code FROM REQUEST_MPU_TRANS request_mpu_trans LEFT OUTER JOIN REQUEST_QUEUE_TRANS request_queue_trans ON request_queue_trans.rqt_id = request_mpu_trans.rqt_id WHERE request_mpu_trans.request_status = 'OPEN' AND request_mpu_trans.kiosk = :KIOSK AND request_mpu_trans.store_number = :STORE_NUMBER
select.from.request_mpu_details = SELECT request_mpu_details.TRANS_DETAIL_ID, request_mpu_details.TRANS_ID, request_mpu_details.RQD_ID, request_mpu_details.REQUESTED_QUANTITY, request_mpu_details.DELIVERED_QUANTITY, request_mpu_details.NOT_DELIVERED_QUANTITY, request_mpu_details.ITEM_STATUS, request_mpu_details.CREATE_TIMESTAMP, request_mpu_details.UPDATE_TIMESTAMP, request_mpu_details.STORE_NUMBER, request_queue_details.RQT_ID, request_queue_details.DIV_NUM, request_queue_details.ITEM, request_queue_details.SKU, request_queue_details.PLUS4, request_queue_details.UPC, request_queue_details.KSN, request_queue_details.QTY, request_queue_details.SALESCHECK, request_queue_details.STORE_NUMBER, request_queue_details.STOCK_LOCATION, request_queue_details.STOCK_QUANTITY, request_queue_details.THUMBNAIL_DESC, request_queue_details.FULL_NAME, request_queue_details.request_number, request_queue_details.escalation, request_queue_details.escalation_time, request_queue_details.ITEM_SEQ, request_queue_details.CREATED_BY, request_queue_details.MODIFIED_BY, request_queue_details.ITEM_ID, request_queue_details.ITEM_SALE_TYPE, request_queue_details.TRANSACTION_TYPE, request_queue_details.ITEM_SALE_ORIGIN, request_queue_details.VER, request_queue_details.LOCKER_ELIGIBLE, request_queue_details.QTY_REMAINING, request_queue_details.RETURN_PARENT_ID, request_queue_details.IS_ACTIVE, request_queue_details.CREATE_TIME, request_queue_details.LAYAWAY_TYPE, request_queue_details.FROM_LOCATION, request_queue_details.TO_LOCATION, request_queue_details.ITEM_IMAGE FROM REQUEST_MPU_DETAILS request_mpu_details, REQUEST_QUEUE_DETAILS request_queue_details where request_queue_details.RQD_ID = request_mpu_details.RQD_ID AND request_mpu_details.TRANS_ID = :TRANS_ID

select.from.details1 = select *,GROUP_CONCAT(value ORDER BY type ASC SEPARATOR '*') AS IDENTIFIER_VALUE from request_queue_details rqd  join request_identifier ri on rqd.rqt_id=ri.rqt_id where rqd.rqt_id in
select.from.details2 = select distinct rqt_id from request_identifier where value in( 
select.from.details3 = select value from request_identifier where rqt_id 
select.from.details4 = in (select rqt_id from request_identifier 
select.from.details5 = where type in ( 
select.from.details6 = select identifier_id from identifier_meta where identifier_type = :identifier_type 
select.from.details7 = ) and value = :value 
select.from.details8 = ) and type in (select identifier_id from identifier_meta where 
select.from.details9 = identifier_type = 'CUSTOMER_ID' or identifier_type = 'ADDRESS1')) and type in (7,12) group by rqd.rqd_id)

select.from.details.order1 = select rqt.rqt_id,rqt.salescheck,GROUP_CONCAT(ri.value ORDER BY type ASC SEPARATOR '*'),rqt.installer_flag,rqt.unsecured_flag from request_queue_trans rqt  join request_identifier ri on rqt.rqt_id=ri.rqt_id where rqt.rqt_id in 
select.from.details.order2 = (select distinct rqt_id from request_identifier where value in(  
select.from.details.order3 = select value,type from request_identifier where rqt_id =:RQT_ID and store_number =:STORE_NUMBER;
select.from.details.order4 = in (select rqt_id from request_identifier  
select.from.details.order5 = where type in (  
select.from.details.order6 = select identifier_id from identifier_meta where identifier_type = :identifier_type  
select.from.details.order7 = ) and value = :value  
select.from.details.order8 = ) and type in (select identifier_id from identifier_meta where 
select.from.details.order9 = identifier_type = 'CUSTOMER_ID' or identifier_type = 'ADDRESS1'))) and type in (7,12,10) and rqt.store_number = :STORE_NUMBER group by rqt.rqt_id 

#select.from.details.order10 = select rqt.rqt_id,rqt.salescheck,rqt.installer_flag,rqt.unsecured_flag from request_queue_trans rqt left outer join request_identifier ri on rqt.rqt_id=ri.rqt_id where rqt.rqt_id in (select rqt_id from request_identifier where type in (select identifier_id from identifier_meta where identifier_type = :identifier_type) and value = :value) and type in (select identifier_id from identifier_meta where identifier_type = :identifier_type)
select.from.details.order11 = select det.from_location,det.to_location,trans.request_type,det.rqt_id,det.rqd_id,det.salescheck,det.div_num,det.item,det.sku,det.item_seq,det.item_status,det.qty,det.qty_remaining , det.layaway_type,det.stock_location,GROUP_CONCAT(ri.value) from request_queue_trans trans left outer join request_queue_details det on trans.rqt_id = det.rqt_id left outer join request_identifier ri on det.rqt_id=ri.rqt_id where det.item_status not in ('PICKED_UP') and det.store_number = :STORE_NUMBER and det.rqt_id in (select rqt_id from request_identifier where (type in (:CUSTOMER_TYPE) and value = :CUSTOMER_ID) 
select.from.details.order13 = or (type in (:ADDRESS1_TYPE) and value = :ADDRESS1))  
select.from.details.order14 = or (type in (:ADDRESS2_TYPE) and value = :ADDRESS2)) 
select.from.details.order15 = and type in (:CUSTOMER_TYPE,:ADDRESS1_TYPE) group by rqd_id 
select.from.details.order16 = and type in (:CUSTOMER_TYPE,:ADDRESS2_TYPE) group by rqd_id 
select.from.details.order17 = and type in (:CUSTOMER_TYPE,:ADDRESS1_TYPE,:ADDRESS2_TYPE) group by rqd_id

select.from.details.order18 = select det.from_location,det.to_location,trans.request_type,det.rqt_id,det.rqd_id,det.salescheck,det.div_num,det.item,det.sku,det.item_seq,det.item_status,det.qty,det.qty_remaining , det.layaway_type,det.stock_location,trans.customer_id,trans.request_status from request_queue_trans trans left outer join request_queue_details det on trans.rqt_id = det.rqt_id where det.store_number = :STORE_NUMBER and trans.salescheck in (:SALESCHECK) and (trans.customer_id = :CUSTOMER_ID or trans.customer_id is null or trans.customer_id = '')

select.from.details_naz1 = select * from request_identifier where rqt_id in (
select.from.details_naz2 = select rqt_id from request_identifier where rqt_id in (
select.from.details_naz3 = select rqt_id from request_identifier
select.from.details_naz4 = where (type=:ziptype and value=:zipvalue)) and (type=:address1tpye and value Like '%:address1value%')) 
select.from.details_naz5 = and type= :lastnametype and value = :lastnamevalue

insert.into.entitymapping = insert into orig_purchased_item_mapping( orig_rqt_id, orig_item_id, accessory_rqt_id, accessory_item_id) values (:orig_rqt_id,:orig_item_id,:accessory_rqt_id,:accessory_item_id);
select.from.storekiosk = select * from mcp_store_kiosk h where h.store_no = lpad(:storeNumber,5,0);
select.from.salescheck = select distinct rqt.salescheck from request_queue_trans rqt where rqt.rqt_id = :rqt_id and salescheck like '09300%' ;
select.from.recommendeditems1 = select rci.recomm_item_id,rci.recomm_item_div,rci.recomm_item_num,rci.recomm_item_sku,rci.recomm_item_descr,rci.is_active,d.rqd_id from dj_recommended_items rci left outer join dj_recomm_item_mapping m on rci.recomm_item_id = m.recomm_item_id left outer join request_queue_details d on concat(lpad(d.div_num,3,0),lpad( d.item,5,0), lpad(d.sku,3,0) ) = lpad(m.work_item_id,11,0) where d.rqd_id in (
select.from.recommendeditems2 = ) and concat(lpad(rci.recomm_item_div,3,0), lpad(rci.recomm_item_num , 5, 0), lpad(rci.recomm_item_sku,3,0))  not in ( select concat(lpad(d.div_num,3,0),lpad(d.item,5,0),lpad(d.sku,3,0)) from request_queue_details d where rqd_id in (
select.from.transtable = select * from request_queue_trans where rqt_id = :rqt_id;
select.from.detailstable = select * from request_queue_details where rqd_id = :rqd_Id;
select.via.salescheck = select * from request_queue_trans where salescheck = :salescheck;
selectitem.via.rqtrqdid = select * from request_queue_details where rqt_id = :rqt_Id and rqd_id = :rqd_Id;
select.via.itemid = select * from request_queue_details where rqd_id  = :itemId;
select.via.identifier = select * from request_identifier where rqt_id = :rqt_id and type = (select identifier_id from identifier_meta where identifier_type = :identifier_type);
select.order.from.rqdId = select mpu.trans_id, mpu.store_number, mpu.rqt_id, mpu.kiosk, queue.store_format from request_mpu_trans mpu left outer join request_queue_trans queue on mpu.rqt_id = queue.rqt_id where mpu.trans_id in (select trans_id from request_mpu_details where rqd_id = :RQD_ID) and queue.store_number = :STORE_NUMBER

select.order.via.salescheck = select count(*) from request_queue_trans trans where trans.salescheck = :salescheck and trans.store_number = :store_number
select.order.ri5.salescheck = select count(*) from request_queue_trans trans where trans.return_auth_code = :RETURN_AUTH_CODE and trans.request_type = :REQUEST_TYPE and trans.store_number = :store_number
select.parentrqtid.queuetrans = select rqt_id from request_queue_trans where request_type = :request_type and return_auth_code = :return_auth_code and store_number = :store_number
###Manish###
update.related.saleschecknumber.to.request_mpu_trans = UPDATE REQUEST_MPU_TRANS SET SALESCHECK = :SALESCHECK WHERE TRANS_ID = :TRANS_ID  and STORE_NUMBER = :STORE_NUMBER
select.from.details.from.order = select ver,detail.rqd_id,detail.rqt_id,assigned_user,div_num,item,sku,upc,plus4,ksn,qty,detail.salescheck,item_status,thumbnail_desc from request_queue_trans trans left outer join request_queue_details detail on trans.rqt_id = detail.rqt_id where trans.rqt_id in (:RQT_ID) and trans.store_number= :STORE_NUMBER and if(trans.request_type='BINWEB',detail.item_status = 'BINNED',true)
select.from.payment.from.order = select rqt_id,account_number,amount,status,payment_date,expiration_date,created_by,modified_by,type,store_number from request_queue_payment where rqt_id in (:RQT_ID) and store_number = :STORE_NUMBER
initiate_pickup = update request_queue_details set item_status=:PICKUP_INITIATED, qty_remaining = if(qty_remaining = 0,qty - :REQUESTED_QUANTITY ,qty_remaining - :REQUESTED_QUANTITY), from_location = :FROM_LOCATION, to_location = :KIOSK  where rqd_id=:RQD_ID and store_number = :STORE_NUMBER
select.request.activityid = select request_action_status_id,activity from request_action_status_meta where request_type = :REQUEST_TYPE and next_status = :NEXT_STATUS
#initiate_pickup_activity = insert into request_activity(rqt_id,rqd_id,create_timestamp,type,store_number,created_by) values(:RQT_ID,:RQD_ID,:CREATE_TIMESTAMP,:TYPE,:STORE_NUMBER,:CREATED_BY)
initiate_mpu_activity = insert into request_activity(rqt_id,rqd_id,create_timestamp,type,store_number,created_by,action_seq,activity_description,assigned_user,from_location,to_location,delivered_quantity) values (:RQT_ID , :RQD_ID , :CREATE_TIMESTAMP, :TYPE, :STORE_NUMBER, :CREATED_BY , :ACTION_SEQ , :ACTIVITY_DESCRIPTION , :ASSIGNED_USER , :FROM_LOCATION , :TO_LOCATION, :DELIVERED_QUANTITY)
#initiate_pickup_orders = insert into request_mpu_trans (type,start_time,associate_id,search_method,search_value,kiosk,store_number,original_salescheck,request_status,card_swiped,rqt_id) values (:TYPE,:CREATE_TIMESTAMP,:ASSOCIATE_ID,:SEARCH_METHOD,:SEARCH_VALUE,:KIOSKLOCATION,:STORE_NUMBER,:SALESCHECK,:REQUEST_STATUS,:CARD_SWIPED,:RQT_ID)
#initiate_pickup_details = insert into request_mpu_details (type,start_time,associate_id,search_method,search_value,kiosk,store_number,original_salescheck,request_status,card_swiped,rqt_id) values (:TYPE,:CREATE_TIMESTAMP,:ASSOCIATE_ID,:SEARCH_METHOD,:SEARCH_VALUE,:KIOSKLOCATION,:STORE_NUMBER,:SALESCHECK,:REQUEST_STATUS,:CARD_SWIPED,:RQT_ID)
complete_mpu_item_request = update request_mpu_details set delivered_quantity = :DELIVERED_QUANTITY,not_delivered_quantity = :NOT_DELIVERED_QUANTITY,item_status = :ITEM_STATUS,update_timestamp = :UPDATE_TIMESTAMP where rqd_id=:RQD_ID and store_number = :STORE_NUMBER and trans_id = :TRANS_ID and trans_detail_id = :TRANS_DETAIL_ID
complete_mpu_request = update request_mpu_trans set sears_sales_id = :SEARS_SALES_ID ,associate_id = :ASSOCIATE_ID,end_time = :UPDATE_TIMESTAMP,request_status=:REQUEST_STATUS where store_number = :STORE_NUMBER and trans_id = :TRANS_ID
complete_queue_item_request = update request_queue_details set item_status = case (qty_remaining + :QTY_REMAINING) WHEN 0 THEN :ITEM_STATUS1 ELSE item_status end, qty_remaining = qty_remaining + :QTY_REMAINING where rqd_id = :RQD_ID and store_number = :STORE_NUMBER
complete_queue_request = update request_queue_trans set request_status = :REQUEST_STATUS, update_timestamp = :UPDATE_TIMESTAMP where rqt_id = :RQT_ID and store_number = :STORE_NUMBER
checkForQtyRemaining = select qty_remaining from request_queue_details where rqd_id = :RQD_ID and store_number = :STORE_NUMBER
checkForOpenActivityDetails = select rqd_id from request_mpu_details where rqd_id = :RQD_ID and store_number= :STORE_NUMBER and item_status = :ITEM_STATUS
checkForOpenItems = select rqd_id from request_queue_details where rqt_id = :RQT_ID and item_status not in (:ITEM_STATUS1,:ITEM_STATUS2) and store_number = :STORE_NUMBER
assign_mpu_associate = update request_mpu_trans set associate_id = :ASSOCIATE_ID,sears_sales_id = :SEARS_SALES_ID where trans_id = :TRANS_ID and store_number = :STORE_NUMBER
#select.status.qty.from.details = select trans.associate_id,det.delivered_quantity, concat(ifnull(concat(item.div_num,item.ITEM,item.SKU,ifnull(item.plus4,'')),''),',',ifnull(item.ksn,''),',',ifnull(item.upc,''),',',ifnull((if(item.item_id='',' ,',item.item_id)),' ,'),'-',ifnull(item.item_seq,'')) as ITEM_IDENTIFIER from request_mpu_details det left outer join request_mpu_trans trans on det.trans_id = trans.trans_id left outer join request_queue_details item on det.rqd_id = item.rqd_id where trans.trans_id = :TRANS_ID;
select.status.qty.from.details = select trans.associate_id,det.delivered_quantity, concat(ifnull(concat(item.div_num,item.ITEM,item.SKU,ifnull(item.plus4,'')),''),',',ifnull(item.ksn,''),',',ifnull(item.upc,''),'-',ifnull(item.item_seq,'')) as ITEM_IDENTIFIER from request_mpu_details det left outer join request_mpu_trans trans on det.trans_id = trans.trans_id left outer join request_queue_details item on det.rqd_id = item.rqd_id where trans.trans_id = :TRANS_ID;
update_original_json = update request_queue_trans set originalJson = :ORIGINALJSON where rqt_id = :RQT_ID and lpad(store_number, 5, 0) = lpad(:STORE_NUMBER, 5, 0);
update_queue_request = update request_queue_trans set update_timestamp = :UPDATE_TIMESTAMP where rqt_id = :RQT_ID and store_number = :STORE_NUMBER
update_unsecured_flag = update request_queue_trans set unsecured_flag = :UNSECURED_FLAG where rqt_id = :RQT_ID and store_number = :STORE_NUMBER
select_payment_list_for_rqtid = select * from request_queue_payment where rqt_id = :RQT_ID and store_number = :STORE_NUMBER

#### shipra get ParentRqt and ParentRqdIds for Return ###


select.from.parentrqtid = select rqt_id from request_queue_trans where salescheck = :SALESCHECK and customer_id = :CUSTOMERID and store_number = :STORENO
select.from.parentrqdid = select rqd_id from request_queue_details where div_num = :DIV and item = :ITEM and sku = :SKU and item_seq = :ITEMSEQ and salescheck = :SALESCHECK and rqt_id = :RQTID
select.from.previousri5progress = select trans_id,CUSTOMER_NAME from request_mpu_trans where return_auth_code = :RETURN_AUTH_CODE and type = :REQUEST_TYPE and request_status = :REQUEST_STATUS
update.cancelreturn = update request_mpu_trans set request_status = :REQUESTSTATUS where trans_id = :TRANSID and store_number = :STORENO
update_item_details_return = update request_mpu_details rqd set rqd.requested_quantity = :QTY where trans_detail_id = :TRANSDETAILID
select.from.item_details.npos = select q.div_num,q.item,q.sku,q.plus4,q.upc,q.ksn,q.qty,q.from_location,q.to_location,q.item_image,q.store_number,q.stock_location,q.stock_quantity,q.thumbnail_desc,q.item_seq,q.item_id,q.item_sale_type,q.transaction_type,q.item_sale_origin,q.qty,m.requested_quantity,m.delivered_quantity,m.not_delivered_quantity,m.item_status,m.create_timestamp from request_queue_details q, request_mpu_details m where q.rqd_id = m.rqd_id and m.trans_id= :TRANS_ID;
select.from.order.mpu = select * from request_mpu_trans where TRANS_ID = :TRANS_ID
select.from.modactive = SELECT distinct user_fname,user_lname FROM mcp_active_user where store_no = :STORE_NUMBER and mod_flag = :MOD_FLAG and logged_out_time = :LOGGED_OUT_TIME and active_user_flag='Y';
### shipra end #####=======

cancel_items=update request_queue_details set item_status=:item_status where rqt_id=(Select rqt_id from request_queue_trans where request_number=:request_number and request_status in ('OPEN','WIP','COMPLETED'));
cancel_request=update request_queue_trans set request_status=:req_status,update_timestamp = curtime() where rqt_id=:rqt_id;
cancel_restock_Items = update request_queue_details set escalation=0,escalation_time=:escalationTime,create_time=:escalationTime,assigned_user=null,ITEM_STATUS=case when ITEM_STATUS='AVAILABLE' then 'RESTOCK_PENDING' else 'CANCELLED' end where rqd_id = :rqd_id;
check_status = select rqt.request_status from request_queue_trans rqt where rqt.request_number = :reqNum AND rqt.request_type='H&G' order by rqt.rqt_id desc LIMIT 1;
is_order_kept_in_locker = SELECT * FROM MPU_LOCKER WHERE REFERENCE_ID = :rqt_id AND STORE_NUMBER= :store_number AND STATUS = 'BINNED' AND  PIN_NO IS NOT NULL;

###Please do not change this query#########
select.from.metatransidentifier.print=SELECT identifier.rqt_id,identifier.value,identifier.type,identifier.store_number from  REQUEST_IDENTIFIER identifier  where identifier.rqt_id  = :RQT_ID

select.from.mcpstorekiosk.kiosklist=select kiosk_name from mcp_store_kiosk where store_no= lpad(:STORE_NUM, 5, 0)

 ########################## COM QUERY DETAILS #################################
select.from.com.exception=select distinct detail.salescheck, value last_name ,div_num ,item,sku,ifnull(plus4,'0000'),ifnull(DELIVERED_QUANTITY,'0'), case when detail.item_status = 'CANCELLED' then 'CANCEL' when detail.item_status = 'VOIDED' then 'VOID' else 'SAME DAY HFM' end,case when (detail.item_status = 'CANCELLED' or detail.item_status = 'VOIDED') then 'OPEN' when (detail.item_status = 'CLOSED' or detail.item_status = 'MOD_VERIFY') then 'Out Of Stock' else 'Incomplete' end, substring(trans.create_timestamp,12,8), rqd_id,detail.assigned_user,qty,if(trans.update_timestamp = null,trans.create_timestamp,substr(trans.update_timestamp,12,8)),detail.assigned_user,if(trans.update_timestamp = null,trans.create_timestamp,substr(trans.update_timestamp,1,10)),trans.update_timestamp,trans.create_timestamp,"",detail.item_seq,detail.item_id,trans.rqt_id,detail.THUMBNAIL_DESC from request_queue_trans trans,request_queue_details detail ,REQUEST_IDENTIFIER identifier where trans.request_type in( 'STAGE' ) and trans.rqt_id = detail.rqt_id and trans.rqt_id = identifier.rqt_id and identifier.type IN (2) and substring(trans.create_timestamp,1,10)= :CREATED_DATE and detail.store_number = :STORE_NUMBER and detail.IS_ACTIVE = :IS_ACTIVE and detail.item_status  not in ('RSTK_PEND_VOID','RSTK_PEND_CNL')
update.into.item.for.com=update REQUEST_QUEUE_DETAILS  set is_active = 'N' , ASSIGNED_USER = :ASSIGNED_USER where rqd_id = :RQD_ID 
update.into.trans.for.com=update REQUEST_QUEUE_TRANS  set UPDATE_TIMESTAMP = :UPDATE_TIMESTAMP where  rqt_id = :RQT_ID

###Please do not change this query#########
select.from.metatransidentifier.print=SELECT identifier.rqt_id,identifier.value,identifier.type,identifier.store_number from  REQUEST_IDENTIFIER identifier  where identifier.rqt_id  = :RQT_ID

############# SHOPIN QUERY ##############
update.into.request_identifier = update request_identifier set value=:IDENTIFIER_VALUE where store_number=:STORE_NUMBER and type=:IDENTIFIER_TYPE and rqt_id=:RQT_ID
insert.into.request_identifier= insert into request_identifier (rqt_id,value,type,store_number) values (:RQT_ID,:IDENTIFIER_VALUE,:IDENTIFIER_TYPE,:STORE_NUMBER)

select.max.shopin.pickupId = SELECT MAX(pickup_id) FROM pickup_report
insert.shopin.report.record = insert into pickup_report (PICKUP_ID,STORE_NO,REGION,DISTRICT,PICKUP_REQUEST_TYPE,SALESCHECK,REQ_QUANTITY,START_TIME,work_id) values (:PICKUP_ID,:STORE_NUMBER,:REGION,:DISTRICT,:PICKUP_REQUEST_TYPE,:SALESCHECK,:REQ_QUANTITY,:START_TIME,:RQT_ID)
update.shopin.report.record = update pickup_report set PICKEDUP_QUANTITY =:PICKEDUP_QUANTITY, PICKUP_STATUS=:STATUS, customer_name=:CUSTOMER_NAME, associate_name=:ASSOCIATE_NAME, END_TIME=:END_TIME  where SALESCHECK = :SALESCHECK and PICKUP_STATUS IS NULL        

load.sellunit.records = select SHC_UNIT_ID,ORIG_UNIT_ID,SHC_UNIT_NAME,SHC_UNIT_REGION,SHC_UNIT_DISTRICT,ADDR_LN,CTY_NM,COUNTY_NM,STATE_CD,PSTL_CD,PHONE_NBR,TIME_ZONE,shc_unit_typ,SHC_UNIT_SUB_TYP from sell_unit_tbl
get.sellunit.record = select SHC_UNIT_ID,ORIG_UNIT_ID,SHC_UNIT_NAME,SHC_UNIT_REGION,SHC_UNIT_DISTRICT,ADDR_LN,CTY_NM,COUNTY_NM,STATE_CD,PSTL_CD,PHONE_NBR,TIME_ZONE,shc_unit_typ,SHC_UNIT_SUB_TYP from sell_unit_tbl where SHC_UNIT_ID = :STORE_NO 

get.shopinreport  = SELECT PICKUP_ID,STORE_NO,REGION,DISTRICT,PICKUP_REQUEST_TYPE,WORK_ID,SALESCHECK,REQ_QUANTITY,PICKEDUP_QUANTITY,START_TIME,END_TIME,PICKUP_STATUS,customer_name,associate_name from pickup_report where START_TIME between :DATE_FROM  and :DATE_TO  
get.shopinreport.byStoreAndDate  = and STORE_NO =:STORE_NO 
get.shopinreport.byRegionAndDate = and REGION =:REGION 
get.shopinreport.byDistrictAndDate = and DISTRICT =:DISTRICT 

################## NOT DELIVER ######################

get.orderdetails.by_req_id = select mpuTrans.original_salescheck,mpuTrans.customer_name,mpuTrans.rqt_id,mpuTrans.associate_name,mpuTrans.associate_id from REQUEST_MPU_TRANS mpuTrans INNER JOIN REQUEST_MPU_DETAILS mpuDetails on mpuTrans.trans_id = mpuDetails.trans_id where mpuDetails.rqd_id= :RQD_ID and mpuDetails.store_number = :STORE_NO

#Below query added to fix JIRA-25355
get.itemdetails.by_req_id =select rqd_id, rqt_id, assigned_user, div_num, item, sku, plus4, upc, ksn, qty, salescheck, item_status, from_location, to_location, item_image, store_number, stock_location, stock_quantity, thumbnail_desc, full_name, request_number, escalation, escalation_time, item_seq, created_by, modified_by, delivered_quantity, item_id, item_sale_type, transaction_type, item_sale_origin, ver, locker_eligible, qty_remaining, return_parent_id, is_active, create_time, layaway_type, ffm_type, sears_sales_id from request_queue_details where rqd_id  = :RQD_ID and store_number = :STORE_NO;

##############  ACTIVE USER ###############
insert.into.mcpActiveUser=INSERT INTO mcp_active_user (user_id,store_no,captain_flag,active_kiosk,inrange,socket_host,logged_in_time,logged_out_time,mod_flag,web_socket_port,user_fname,user_lname,active_user_flag,associate_id) VALUES (:USER_ID,:STORE_NUMBER,:CAPTAIN_FLAG,:ACTIVE_KIOSK,:INRANGE,:SOCKET_HOST,:LOGGED_IN_TIME,:LOGGED_OUT_TIME,:MOD_FLAG,:WEBSOCKET_PORT,:USER_FNAME,:USER_LNAME,:ACTIVE_USER_FLAG,:ASSOCIATE_ID)
select.from.mcpActiveUser=SELECT user_id,store_no,captain_flag,active_kiosk,inrange,socket_host,logged_in_time,logged_out_time,mod_flag,web_socket_port,user_fname,user_lname,active_user_flag,associate_id FROM mcp_active_user WHERE user_id=:USER_ID and active_user_flag='Y' and store_no=:store_number
update.activeUserFlag=update mcp_active_user set active_user_flag=:ACTIVE_USER_FLAG where user_id=:USER_ID and logged_in_time=:LOGGED_IN_TIME
update.modFlag=update mcp_active_user set mod_flag=:MOD_FLAG where user_id=:USER_ID and logged_in_time=:LOGGED_IN_TIME
update.loggedOutTime=update mcp_active_user set logged_out_time=:LOGGED_OUT_TIME,active_user_flag=:ACTIVE_USER_FLAG where user_id=:USER_ID

select.all.from.mcpActiveUser=select count(*) from mcp_active_user where store_no= :STORE_NUMBER and active_user_flag ='Y' and mod_flag = '0'
############ LOCKER #################

update_locker_queue_order = update request_queue_trans set request_status = :STATUS where rqt_id = :RQT_ID and store_number = :STORE_NUMBER
update_locker_queue_item = update request_queue_details set item_status = :STATUS where rqt_id = :RQT_ID and store_number= :STORE_NUMBER
update_locker_mpu_order = update request_mpu_trans set request_status = :STATUS where trans_id = :TRANS_ID and store_number = :STORE_NUMBER
update_locker_mpu_details = update request_mpu_details set item_status = :STATUS where trans_id = :TRANS_ID and store_number= :STORE_NUMBER


###########Select####################
select.all.request_mpu_details = SELECT request_mpu_details.TRANS_DETAIL_ID, request_mpu_details.TRANS_ID, request_mpu_details.RQD_ID, request_mpu_details.REQUESTED_QUANTITY, request_mpu_details.DELIVERED_QUANTITY, request_mpu_details.NOT_DELIVERED_QUANTITY, request_mpu_details.ITEM_STATUS, request_mpu_details.CREATE_TIMESTAMP, request_mpu_details.UPDATE_TIMESTAMP, request_mpu_details.STORE_NUMBER, request_queue_details.RQT_ID, request_queue_details.DIV_NUM, request_queue_details.ITEM, request_queue_details.SKU, request_queue_details.PLUS4, request_queue_details.UPC, request_queue_details.KSN, request_queue_details.QTY, request_queue_details.SALESCHECK, request_queue_details.STORE_NUMBER, request_queue_details.STOCK_LOCATION, request_queue_details.STOCK_QUANTITY, request_queue_details.THUMBNAIL_DESC, request_queue_details.FULL_NAME, request_queue_details.request_number, request_queue_details.escalation, request_queue_details.escalation_time, request_queue_details.ITEM_SEQ, request_queue_details.CREATED_BY, request_queue_details.MODIFIED_BY, request_queue_details.ITEM_ID, request_queue_details.ITEM_SALE_TYPE, request_queue_details.TRANSACTION_TYPE, request_queue_details.ITEM_SALE_ORIGIN, request_queue_details.VER, request_queue_details.LOCKER_ELIGIBLE, request_queue_details.QTY_REMAINING, request_queue_details.RETURN_PARENT_ID, request_queue_details.IS_ACTIVE, request_queue_details.CREATE_TIME, request_queue_details.LAYAWAY_TYPE, request_queue_details.FROM_LOCATION, request_queue_details.TO_LOCATION, request_queue_details.ITEM_IMAGE,request_queue_details.DELIVERED_QUANTITY detail_delivered_qty,mpu_locker.PIN_NO FROM REQUEST_MPU_DETAILS request_mpu_details left outer join REQUEST_QUEUE_DETAILS request_queue_details on request_queue_details.RQD_ID = request_mpu_details.RQD_ID left outer join MPU_LOCKER mpu_locker on request_queue_details.RQD_ID = mpu_locker.REFERENCE_ID WHERE request_mpu_details.TRANS_ID in (:TRANS_ID)
select.all.from.package= SELECT package.PACKAGE_ID,lpad(package.package_number,6,0) as package_number,package.rqt_id,package.from_location,package.to_location,package.create_timestamp,package.created_by,package.assigned_user,package.store_number FROM request_package package,REQUEST_MPU_TRANS request_mpu_trans where package.store_number = :STORE_NUMBER and package.rqt_id = request_mpu_trans.rqt_id and request_mpu_trans.TRANS_ID in (:TRANS_ID)  group by package.PACKAGE_ID

##############  Pickup Report ###############
get_pickup_peport = SELECT rmt.STORE_NUMBER, rmt.SALESCHECK, rmd.RQD_ID, rqd.DIV_NUM, rqd.ITEM_ID, rqd.SKU, CONCAT_WS('/', rqd.DIV_NUM, rqd.ITEM, rqd.SKU) DIV_ITEM_SKV, rmt.START_TIME, rmt.END_TIME, TIMEDIFF(rmt.END_TIME, rmt.START_TIME) DURATION, rmt.ASSOCIATE_NAME FROM request_mpu_trans rmt inner join request_mpu_details rmd ON rmt.TRANS_ID = rmd.TRANS_ID inner join request_queue_details rqd on rqd.RQD_ID = rmd.RQD_ID where rmt.STORE_NUMBER = :STORE_NUMBER and rmt.START_TIME >=:REPORT_START_DATE and rmt.END_TIME <=:REPORT_END_DATE
#get_pickup_peport_store_number = where rmt.STORE_NUMBER = :STORE_NUMBER
#get_pickup_peport_date = and rmt.START_TIME >=:REPORT_START_DATE and rmt.END_TIME <=:REPORT_END_DATE

##############f  Stage orders Report ###############
get_pickup_for_stage_orders_peport = SELECT RQT.STORE_NUMBER, sum(if(RQT.REQUEST_STATUS='OPEN',1,0)) AS DIRECT_PICKUP, sum(if(RQT.REQUEST_STATUS='COMPLETED',1,0)) AS STAGED_PICKUP FROM REQUEST_QUEUE_TRANS RQT INNER JOIN REQUEST_MPU_TRANS RMT ON RQT.RQT_ID = RMT.RQT_ID WHERE RQT.REQUEST_TYPE IN ('STAGE', 'BINSTAGE') AND RMT.TYPE = 'PICKUP' and rmt.START_TIME >=:REPORT_START_DATE and rmt.END_TIME <=:REPORT_END_DATE
#get_stage_orders_peport_date = and rmt.START_TIME >=:REPORT_START_DATE and rmt.END_TIME <=:REPORT_END_DATE
get_return_for_stage_orders_peport = SELECT RMT.STORE_NUMBER, sum(if(RMT.TYPE='RETURN',1,0)) AS 'RETURNED', sum(if(RMT.TYPE='RETURNIN5',1,0)) AS 'RETURNIN5', sum(if(RMT.TYPE='HELP',1,0)) AS 'HELP', sum(if(RMT.TYPE='REPAIR_PICKUP',1,0)) AS 'REPAIR_PICKUP', sum(if(RMT.TYPE='REPAIR_DROPOFF',1,0)) AS 'REPAIR_DROPOFF' FROM REQUEST_MPU_TRANS RMT WHERE rmt.START_TIME >=:REPORT_START_DATE and rmt.END_TIME <=:REPORT_END_DATE
check.platform.store=SELECT ui_host_name_server as UI_SERVER from dj_ddr_meta where store_id = :STORE;

############# CSM Log OFF ########
get.mpu.static.param.value = SELECT msp.mpu_static_Param_id,msp.store_no,msp.store_format,msp.param_key,msp.param_value FROM mpu_static_Param msp where msp.param_key = 'run_csm_logoff_function' and msp.param_value = '1' and  msp.store_format = 'SearsRetail'
get.active.modusers = SELECT user_id,store_no,captain_flag,active_kiosk,inrange,socket_host,logged_in_time,logged_out_time,mod_flag,web_socket_port,user_fname,user_lname,active_user_flag,associate_id FROM mcp_active_user where active_user_flag = :ACTIVE_USER_FLAG and mod_flag =:MOD_FLAG
select.binned.rqdlist = SELECT  rqd_id from request_activity where rqd_id in (:rqdIds) and (activity_description LIKE '%Item placed in bin%' or activity_description LIKE '%ITEM Scanned and Put in Staging Area%' or activity_description LIKE '%Package placed in bin%');


##############  HOldGo Report ###############
#get_holdgo_records = SELECT rqt.rqt_id,rqt.update_timestamp,rqd.store_number,rqd.assigned_user,rqd.request_number, rqd.div_num, rqd.item, rqd.sku, rqd.qty, (case rqd.item_status WHEN 'A' THEN 'Completed' WHEN 'NA' THEN 'Out Of Stock' WHEN 'Void' THEN 'No Response' ELSE rqd.item_status end) as status, rqt.create_timestamp,rqd.item_seq FROM request_queue_details rqd, request_queue_trans rqt WHERE rqt.rqt_id = rqd.rqt_id and rqt.request_type='H&G' and rqd.item_status not in ('CANCEL','EXPIRE')AND rqt.create_timestamp>=:REPORT_START_DATE AND rqt.create_timestamp<=:REPORT_END_DATE
get_holdgo_records = SELECT rqt.rqt_id,rqd.store_number,rqd.assigned_user,rqd.request_number, rqd.div_num, rqd.item, rqd.sku, rqd.qty,(case when (select count(*) from request_activity ra where action_seq in ('2','5') and ra.rqd_id=rqd.rqd_id) > 0 then (select create_timestamp from request_activity ra where action_seq in ('2','5') and ra.rqd_id=rqd.rqd_id order by ra.create_timestamp limit 1) else rqt.create_timestamp end) as create_timestamp,(case when (select count(*) from request_activity ra where action_seq in ('3','12','4') and ra.rqd_id=rqd.rqd_id) > 0 then (select create_timestamp from request_activity ra where action_seq in ('3','12','4') and ra.rqd_id=rqd.rqd_id order by ra.create_timestamp limit 1) else '' end) as update_timestamp, (case rqd.item_status WHEN 'A' THEN 'Completed' WHEN 'NA' THEN 'Out Of Stock' WHEN 'Void' THEN 'No Response' ELSE rqd.item_status end) as status,rqd.item_seq FROM request_queue_trans rqt left join request_queue_details rqd on rqt.rqt_id = rqd.rqt_id WHERE rqt.request_type='H&G' and rqd.item_status not in ('CANCELLED','EXPIRED') AND rqt.create_timestamp>=:REPORT_START_DATE AND rqt.create_timestamp<=:REPORT_END_DATE
get_customer_name = select group_concat(value separator ' ') as customerName from request_identifier where rqt_id=:RQT_ID and type in (1,2)
delete_payment_list_for_rqtid=delete from request_queue_payment where rqt_id in (:rqtIdList) and store_number=:storeNumber
 


get.appserver.store=SELECT host_name_server as SERVER ,store_properties from dj_ddr_meta where store_id = :STORE;

############## Associate Report###################

insert_into_mpu_associate_report = insert into mpu_associate_report(mpu_associate_report_created_ts,store_no,associate_id,operation_type,operation_value,input_type,order_type,work_item_id,work_item_status) values(:MPU_ASSOCIATE_REPORT_CREATED_TS,:STORE_NUMBER,:ASSOCIATE_ID,:OPERATION_TYPE,:OPERATION_VALUE,:INPUT_TYPE,:ORDER_TYPE,:RQD_ID,:WORK_ITEM_STATUS)
update_mpu_associate_report = update mpu_associate_report set work_item_status = :WORK_ITEM_STATUS where store_no = :STORE_NUMBER and work_item_id = :RQD_ID;

select_from_mpu_trans = select trans_id,start_time,request_status from request_mpu_trans where trans_id = :TRANS_ID and store_number = :STORE_NUMBER 
check_if_request_already_completed =  and request_status in (:PICKED_UP,:COMPLETED,:RETURNED);

fetch_package_info_from_mcp_workflow = select package.package_number, package.created_by, package.layaway_bin, work.work_order_identifier, work.store_no from mcp_work work left outer join mcp_work_package package on work.work_id = package.work_id where work.work_id in (select work_id from mcp_work where work_order_identifier in (:SALESCHECK) and work_status not in (:CLOSED));
select.trans.from.salescheck = select mpu.trans_id, mpu.store_number, mpu.rqt_id, mpu.kiosk, queue.store_format from request_mpu_trans mpu left outer join request_queue_trans queue on mpu.rqt_id = queue.rqt_id where queue.salescheck = :SALESCHECK and queue.store_number = :STORE_NUMBER


select_post_void_count = select count(rqd_id) from request_queue_details where rqt_id = :RQT_ID and store_number =:storeNumber and item_status in ('PICKED_UP','PICKUP_INITIATED')

#update_sameDay_hfm_bin =UPDATE request_queue_details rqd set rqd.from_location=concat('BIN ',substring(rqd.salescheck,12)) WHERE rqd_id in (select rqd_id from (select rqd.rqd_id from request_queue_details rqd INNER JOIN REQUEST_QUEUE_TRANS trans on rqd.rqt_id = trans.rqt_id where rqd.item_status in (:item_status) and trans.REQUEST_STATUS in (:request_status)  and trans.request_type=:request_type and substring(trans.update_timestamp,1,10)=CURDATE()) as TEMP);
 get.return.flag = select count(*) from mcp_store_kiosk where store_no = :store and repair_enabled = 'Y'
 ##For Updating UPC
 update_upc = update request_queue_details set upc = :UPC where rqd_id = :RQD_ID and store_number = :STORE_NUMBER;
 
 select_ret_auth_code = select return_auth_code from request_queue_trans where rqt_id = :RQT_ID
 update.item.escalation =  update request_queue_details set escalation=:escalation,escalation_time=:escalation_time where rqd_id=:rqd_id
 
 ######################SHOP IN Report###################
 
 get_shopin_records = select trans.trans_id,trans.store_number,trans.pickup_source,trans.start_time,trans.end_time, (unix_timestamp(trans.end_time)-unix_timestamp(trans.start_time))/60 elapsed_time,trans.associate_id, trans.original_salescheck,trans.customer_name,trans.request_status,sum(details.delivered_quantity) delivered_qty, sum(details.requested_quantity) requested_qty,details.trans_id FROM REQUEST_MPU_TRANS TRANS, REQUEST_MPU_DETAILS DETAILS where type='PICKUP' and pickup_source='SHOPIN' and trans.trans_id=details.trans_Id and trans.start_time > :REPORT_START_DATE and trans.start_time < :REPORT_END_DATE 
 get_shopin_records_where_clause = and trans.store_number = :STORE_NUMBER 
 get_shopin_records_group_by =  group by details.trans_id
 
 ################Saving final response ####################
 
 update.final.response = update request_queue_trans set finalResponse = :finalResponse where RQT_ID = :rqtId and store_number = :storeNum
  update.finalResponse.status = update request_queue_trans set response_status = 'FAILED' where order_id = :orderNumber and store_number = :storeNum